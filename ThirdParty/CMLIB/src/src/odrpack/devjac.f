*DEVJAC
      SUBROUTINE DEVJAC
     +   (FUN,JAC,ANAJAC,
     +   N,NP,NPP,M,BETAC,BETA,IFIXB,IFIXX,LDIFX,
     +   X,LDX,DELTA,LDDELT,XPLUSD,LDXPD,
     +   SS,TT,LDTT,EPSMAC,PV,STP,
     +   FJACB,LDFJB,ISODR,FJACX,LDFJX,W,NJEV,NFEV,IFLAG)
C***BEGIN PROLOGUE  DEVJAC
C***REFER TO  DODR,DODRC
C***ROUTINES CALLED  DDIAGW,DJACFD,DUNPAC,DXPY,DZERO
C***DATE WRITTEN   860529   (YYMMDD)
C***REVISION DATE  870204   (YYMMDD)
C***CATEGORY NO.  G2E,I1B1
C***KEYWORDS  ORTHOGONAL DISTANCE REGRESSION,
C             NONLINEAR LEAST SQUARES,
C             ERRORS IN VARIABLES
C***AUTHOR  BOGGS, PAUL T.
C             OPTIMIZATION GROUP/SCIENTIFIC COMPUTING DIVISION
C             NATIONAL BUREAU OF STANDARDS, GAITHERSBURG, MD 20899
C           BYRD, RICHARD H.
C             DEPARTMENT OF COMPUTER SCIENCE
C             UNIVERSITY OF COLORADO, BOULDER, CO 80309
C           DONALDSON, JANET R.
C             OPTIMIZATION GROUP/SCIENTIFIC COMPUTING DIVISION
C             NATIONAL BUREAU OF STANDARDS, BOULDER, CO 80303-3328
C           SCHNABEL, ROBERT B.
C             DEPARTMENT OF COMPUTER SCIENCE
C             UNIVERSITY OF COLORADO, BOULDER, CO 80309
C             AND
C             OPTIMIZATION GROUP/SCIENTIFIC COMPUTING DIVISION
C             NATIONAL BUREAU OF STANDARDS, BOULDER, CO 80303-3328
C***PURPOSE  COMPUTE THE WEIGHTED JACOBIANS WRT BETA AND DELTA
C***END PROLOGUE  DEVJAC
C
C  EXTERNALS
C
      EXTERNAL FUN
C        THE NAME OF USER-SUPPLIED ROUTINE FOR COMPUTING THE MODEL.
C        (FOR DETAILS, SEE ODRPACK REFERENCE GUIDE SECTION V.B,
C        ARGUMENT FUN.)
      EXTERNAL JAC
C        THE NAME OF USER-SUPPLIED ROUTINE FOR COMPUTING THE JACOBIANS.
C        (FOR DETAILS, SEE ODRPACK REFERENCE GUIDE SECTION V.B,
C        ARGUMENT JAC.)
C
C  VARIABLE DECLARATIONS (ALPHABETICALLY)
C
      LOGICAL ANAJAC
C        THE INDICATOR VARIABLE USED TO DESIGNATE WHETHER THE JACOBIANS
C        ARE COMPUTED BY FINITE DIFFERENCES (ANAJAC=.FALSE.) OR NOT
C        (ANAJAC=.TRUE.).
      DOUBLE PRECISION BETA(NP)
C        THE FUNCTION PARAMETERS.
C        (FOR DETAILS, SEE ODRPACK REFERENCE GUIDE.)
      DOUBLE PRECISION BETAC(NP)
C        THE CURRENT ESTIMATED VALUES OF THE UNFIXED BETA'S.
      DOUBLE PRECISION DELTA(LDDELT,M)
C        THE ESTIMATED VALUES OF DELTA.
      DOUBLE PRECISION EPSMAC
C        THE VALUE OF MACHINE PRECISION.
      DOUBLE PRECISION FJACB(LDFJB,NP)
C        THE JACOBIAN WITH RESPECT TO BETA.
      DOUBLE PRECISION FJACX(LDFJX,M)
C        THE JACOBIAN WITH RESPECT TO X.
      INTEGER I
C        AN INDEXING VARIABLE.
      INTEGER IFIXB(NP)
C        THE INDICATOR VALUES USED TO DESIGNATE WHETHER THE INDIVIDUAL
C        ELEMENTS OF BETA ARE FIXED AT THEIR INPUT VALUES OR NOT.
C        (FOR DETAILS, SEE ODRPACK REFERENCE GUIDE.)
      INTEGER IFIXX(LDIFX,M)
C        THE INDICATOR VALUES USED TO DESIGNATE WHETHER THE INDIVIDUAL
C        ELEMENTS OF DELTA ARE FIXED AT THEIR INPUT VALUES OR NOT.
C        (FOR DETAILS, SEE ODRPACK REFERENCE GUIDE.)
      INTEGER IFLAG
C        AN INDICATOR VARIABLE, USED PRIMARILY TO DESIGNATE THAT THE
C        USER WISHES THE COMPUTATIONS STOPPED.
      LOGICAL ISODR
C        THE INDICATOR VARIABLE USED TO DESIGNATE WHETHER THE SOLUTION
C        IS TO BE FOUND BY ODR (ISODR=.TRUE.) OR BY OLS (ISODR=.FALSE.).
      INTEGER J
C        AN INDEXING VARIABLE.
      INTEGER JFX
C        AN INDEXING VARIABLE.
      INTEGER LDDELT
C        THE LEADING DIMENSION OF ARRAY DELTA.
      INTEGER LDFJB
C        THE LEADING DIMENSION OF ARRAY FJACB.
      INTEGER LDFJX
C        THE LEADING DIMENSION OF ARRAY FJACX.
      INTEGER LDIFX
C        THE LEADING DIMENSION OF ARRAY IFIXX.
C        (FOR DETAILS, SEE ODRPACK REFERENCE GUIDE.)
      INTEGER LDTT
C        THE LEADING DIMENSION OF ARRAY TT.
      INTEGER LDX
C        THE LEADING DIMENSION OF ARRAY X.
C        (FOR DETAILS, SEE ODRPACK REFERENCE GUIDE.)
      INTEGER LDXPD
C        THE LEADING DIMENSION OF ARRAY XPLUSD.
      INTEGER M
C        THE NUMBER OF COLUMNS OF DATA IN THE INDEPENDENT VARIABLE.
C        (FOR DETAILS, SEE ODRPACK REFERENCE GUIDE.)
      INTEGER N
C        THE NUMBER OF OBSERVATIONS.
C        (FOR DETAILS, SEE ODRPACK REFERENCE GUIDE.)
      INTEGER NFEV
C        THE NUMBER OF FUNCTION EVALUATIONS.
      INTEGER NJEV
C        THE NUMBER OF JACOBIAN EVALUATIONS.
      INTEGER NP
C        THE NUMBER OF FUNCTION PARAMETERS.
C        (FOR DETAILS, SEE ODRPACK REFERENCE GUIDE.)
      INTEGER NPP
C        THE NUMBER OF FUNCTION PARAMETERS ACTUALLY BEING ESTIMATED.
      DOUBLE PRECISION PV(N)
C        THE PREDICTED VALUES OF THE MODEL FUNCTION AT THE CURRENT
C        POINT.
      DOUBLE PRECISION SS(NP)
C        THE SCALE USED FOR THE ESTIMATED BETA'S.
C        (FOR DETAILS, SEE ODRPACK REFERENCE GUIDE.)
      DOUBLE PRECISION STP(N)
C        THE STEP USED TO COMPUTE FINITE DIFFERENCE DERIVATIVES.
      DOUBLE PRECISION TT(LDTT,M)
C        THE SCALE USED FOR THE DELTA'S.
C        (FOR DETAILS, SEE ODRPACK REFERENCE GUIDE.)
      DOUBLE PRECISION W(N)
C        THE OBSERVATIONAL ERROR WEIGHTS.
C        (FOR DETAILS, SEE ODRPACK REFERENCE GUIDE.)
      DOUBLE PRECISION X(LDX,M)
C        THE INDEPENDENT VARIABLE.
C        (FOR DETAILS, SEE ODRPACK REFERENCE GUIDE.)
      DOUBLE PRECISION XPLUSD(LDXPD,M)
C        THE ARRAY X + DELTA.
      DOUBLE PRECISION ZERO
C          THE VALUE 0.0D0.
C
C
      DATA ZERO/0.0D0/
C
C
C***FIRST EXECUTABLE STATEMENT  DEVJAC
C
C
C  INSERT CURRENT UNFIXED BETA ESTIMATES INTO BETA
C
      CALL DUNPAC(NP,BETAC,BETA,IFIXB)
C
C  COMPUTE XPLUSD = X + DELTA
C
      CALL DXPY(N,M,X,LDX,DELTA,LDDELT,XPLUSD,LDXPD)
C
C  COMPUTE THE JACOBIAN WRT THE ESTIMATED BETAS (FJACB) AND
C          THE JACOBIAN WRT DELTA (FJACX)
C
      IFLAG = 1
      IF (ANAJAC) THEN
         CALL JAC(N,NP,M,BETA,XPLUSD,LDXPD,
     +            FJACB,LDFJB,ISODR,FJACX,LDFJX,IFLAG)
      ELSE
         CALL DJACFD(N,NP,M,BETA,
     +               X,LDX,DELTA,XPLUSD,LDXPD,FUN,
     +               SS,TT,LDTT,EPSMAC,PV,STP,
     +               IFIXB,FJACB,LDFJB,ISODR,
     +               IFIXX,LDIFX,FJACX,LDFJX,NFEV,IFLAG)
      END IF
      IF (IFLAG.LT.0) THEN
         RETURN
      END IF
C
C  INCREMENT COUNT OF NUMBER OF JACOBIAN EVALUATIONS
C
      NJEV = NJEV+1
C
C  WEIGHT THE JACOBIAN WRT THE ESTIMATED BETAS
C
      IF (ANAJAC) THEN
         JFX = 0
         IF (IFIXB(1).GE.0) THEN
            DO 10 J=1,NP
               IF (IFIXB(J).NE.0) THEN
                  JFX = JFX + 1
                  CALL DDIAGW(N,1,W,FJACB(1,J),LDFJB,
     +                        FJACB(1,JFX),LDFJB)
               END IF
   10       CONTINUE
         ELSE
            DO 20 J=1,NP
               CALL DDIAGW(N,1,W,FJACB(1,J),LDFJB,
     +                     FJACB(1,J),LDFJB)
   20       CONTINUE
         END IF
      ELSE
         DO 30 J=1,NPP
            CALL DDIAGW(N,1,W,FJACB(1,J),LDFJB,
     +                  FJACB(1,J),LDFJB)
   30    CONTINUE
      END IF
C
C  WEIGHT OR ZERO THE JACOBIAN'S WRT X AS APPROPRIATE
C
      IF (ISODR) THEN
         IF (IFIXX(1,1).GE.0) THEN
C
C  CHECK FOR POSSIBLY FIXED COLUMNS OR ELEMENTS OF X
C
            IF (LDIFX.EQ.1) THEN
               DO 40 J=1,M
                  IF (IFIXX(1,J).EQ.0) THEN
C
C  ZERO JACOBIAN WRT X(I,J) FOR I=1,N
C
                     CALL DZERO(N,1,FJACX(1,J),LDFJX)
                  ELSE
C
C  WEIGHT JACOBIAN WRT X(I,J) FOR I=1,N
C
                     CALL DDIAGW(N,1,W,FJACX(1,J),LDFJX,
     +                           FJACX(1,J),LDFJX)
                  END IF
   40          CONTINUE
            ELSE
C
C  WEIGHT JACOBIAN WRT X(I,J) FOR I=1,N AND
C  THEN ZERO APPROPRIATE ELEMENTS
C
               DO 60 J=1,M
                  CALL DDIAGW(N,1,W,FJACX(1,J),LDFJX,
     +                        FJACX(1,J),LDFJX)
                  DO 50 I=1,N
                     IF (IFIXX(I,J).EQ.0) THEN
                        FJACX(I,J) = ZERO
                     END IF
   50             CONTINUE
   60          CONTINUE
            END IF
         ELSE
C
C  WEIGHT JACOBIAN WRT X(I,J) FOR I=1,N AND J=1,M
C
            DO 70 J=1,M
               CALL DDIAGW(N,1,W,FJACX(1,J),LDFJX,
     +                     FJACX(1,J),LDFJX)
   70       CONTINUE
         END IF
      ELSE
C
C  ZERO ALL ELEMENTS OF FJACX FOR OLS FIT
C
         CALL DZERO(N,M,FJACX,LDFJX)
      END IF
C
      RETURN
      END

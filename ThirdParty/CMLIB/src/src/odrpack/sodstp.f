*SODSTP
      SUBROUTINE SODSTP
     +   (N,NP,NPP,M,F,FJACB,LDFJB,FJACX,LDFJX,
     +   W,RHO,LDRHO,SS,TT,LDTT,DDELT,
     +   ALPHA,EPSMAC,
     +   SSS,TFJACB,VDTD,OMEGA,YT,U,QRAUX,WRK2,JPVT,
     +   S,T,PHI,IRANK,
     +   RCOND)
C***BEGIN PROLOGUE  SODSTP
C***REFER TO  SODR,SODRC
C***ROUTINES CALLED  ISAMAX,SCHEX,SDIAGS,SDOT,SIDTS,SNRM2,SQRDC,
C                    SQRSL,SROT,SROTG,STRCO,STRSL,SZERO
C***DATE WRITTEN   860529   (YYMMDD)
C***REVISION DATE  870204   (YYMMDD)
C***CATEGORY NO.  G2E,I1B1
C***KEYWORDS  ORTHOGONAL DISTANCE REGRESSION,
C             NONLINEAR LEAST SQUARES,
C             ERRORS IN VARIABLES
C***AUTHOR  BOGGS, PAUL T.
C             OPTIMIZATION GROUP/SCIENTIFIC COMPUTING DIVISION
C             NATIONAL BUREAU OF STANDARDS, GAITHERSBURG, MD 20899
C           BYRD, RICHARD H.
C             DEPARTMENT OF COMPUTER SCIENCE
C             UNIVERSITY OF COLORADO, BOULDER, CO 80309
C           DONALDSON, JANET R.
C             OPTIMIZATION GROUP/SCIENTIFIC COMPUTING DIVISION
C             NATIONAL BUREAU OF STANDARDS, BOULDER, CO 80303-3328
C           SCHNABEL, ROBERT B.
C             DEPARTMENT OF COMPUTER SCIENCE
C             UNIVERSITY OF COLORADO, BOULDER, CO 80309
C             AND
C             OPTIMIZATION GROUP/SCIENTIFIC COMPUTING DIVISION
C             NATIONAL BUREAU OF STANDARDS, BOULDER, CO 80303-3328
C***PURPOSE  COMPUTE LOCALLY CONSTRAINED STEPS S AND T, AND PHI(ALPHA)
C***END PROLOGUE  SODSTP
C
C  FUNCTION DECLARATIONS
C
      REAL SDOT
      REAL SNRM2
C
C  VARIABLE DECLARATIONS (ALPHABETICALLY)
C
      REAL ALPHA
C        THE LEVENBERG-MARQUARDT PARAMETER.
      REAL CO
C        THE COSINE FROM THE PLANE ROTATION.
      REAL DDELT(N,M)
C        THE ARRAY (W*D)**2 * DELTA.
      REAL DUM
C        AN DUMMY VARIABLE.
      LOGICAL ELIM
C        THE INDICATOR VARIABLE USED TO DESIGNATE WHETHER COLUMNS OF THE
C        JACOBIAN WRT BETA HAVE BEEN ELIMINATED (ELIM=.TRUE.) OR NOT
C        (ELIM=.FALSE.).
      REAL EPSMAC
C        THE VALUE OF MACHINE PRECISION.
      REAL F(N)
C        THE (WEIGHTED) ESTIMATED VALUES OF EPSILON.
      REAL FJACB(LDFJB,NP)
C        THE JACOBIAN WITH RESPECT TO BETA.
      REAL FJACX(LDFJX,M)
C        THE JACOBIAN WITH RESPECT TO X.
      INTEGER I
C        AN INDEXING VARIABLE.
      INTEGER IMAX
C        THE INDEX OF THE ELEMENT OF U HAVING THE LARGEST ABSOLUTE
C        VALUE.
      INTEGER INF
C        THE RETURN CODE FROM SQRSL AND STRSL.
      INTEGER IPVT
C        THE INDICATOR VARIABLE USED TO DESIGNATE WHETHER OR NOT
C        PIVOTING IS TO BE DONE.
      INTEGER IRANK
C        THE RANK DEFICIENCY OF THE JACOBIAN WRT BETA.
      INTEGER J
C        AN INDEXING VARIABLE.
      INTEGER JPVT(NP)
C        THE PIVOT VECTOR.
      INTEGER KP
C        THE RANK OF THE JACOBIAN WRT BETA.
      INTEGER LDFJB
C        THE LEADING DIMENSION OF ARRAY FJACB.
      INTEGER LDFJX
C        THE LEADING DIMENSION OF ARRAY FJACX.
      INTEGER LDRHO
C        THE LEADING DIMENSION OF ARRAY RHO.
C        (FOR DETAILS, SEE ODRPACK REFERENCE GUIDE.)
      INTEGER LDTT
C        THE LEADING DIMENSION OF ARRAY TT.
      INTEGER M
C        THE NUMBER OF COLUMNS OF DATA IN THE INDEPENDENT VARIABLE.
C        (FOR DETAILS, SEE ODRPACK REFERENCE GUIDE.)
      INTEGER N
C        THE NUMBER OF OBSERVATIONS.
C        (FOR DETAILS, SEE ODRPACK REFERENCE GUIDE.)
      INTEGER NP
C        THE NUMBER OF FUNCTION PARAMETERS.
C        (FOR DETAILS, SEE ODRPACK REFERENCE GUIDE.)
      INTEGER NPP
C        THE NUMBER OF FUNCTION PARAMETERS ACTUALLY BEING ESTIMATED.
      REAL OMEGA(N)
C        THE ARRAY (I-FJACX*INV(P)*TRANS(FJACX))**(-1/2)  WHERE
C        P = TRANS(FJACX)*FJACX + D**2 + ALPHA*TT**2
      REAL ONE
C        THE VALUE 1.0E0.
      REAL PHI
C        THE DIFFERENCE BETWEEN THE NORM OF THE SCALED STEP
C        AND THE TRUST REGION DIAMETER.
      REAL QRAUX(NP)
C        THE ARRAY REQUIRED TO RECOVER THE ORTHOGONAL PART OF THE
C        Q-R DECOMPOSITION.
      REAL RCOND
C        THE APPROXIMATE RECIPROCAL CONDITION OF TFJACB.
      REAL RHO(LDRHO,M)
C        THE DELTA WEIGHTS.
C        (FOR DETAILS, SEE ODRPACK REFERENCE GUIDE.)
      REAL S(NP)
C        THE STEP FOR THE ESTIMATED BETA'S.
      REAL SI
C        THE SINE FROM THE PLANE ROTATION.
      REAL SS(NP)
C        THE SCALE USED FOR THE ESTIMATED BETA'S.
C        (FOR DETAILS, SEE ODRPACK REFERENCE GUIDE.)
      REAL SSS(N+N*M)
C        THE ARRAY USED TO COMPUTED VARIOUS SUMS-OF-SQUARES.
      REAL T(N,M)
C        THE STEP FOR THE ESTIMATED DELTA'S.
      REAL TEMP
C        A TEMPORARY STORAGE LOCATION.
      REAL TFJACB(N,NP)
C        THE ARRAY INV(DIAG(SQRT(OMEGA(I)),I=1,...,N))*FJACB.
      REAL TT(LDTT,M)
C        THE SCALE USED FOR THE DELTA'S.
C        (FOR DETAILS, SEE ODRPACK REFERENCE GUIDE.)
      REAL U(N)
C        THE APPROXIMATE NULL VECTOR FOR TFJACB.
      REAL VDTD(N,M)
C        THE ARRAY DDELT*INV(DT) WHERE DT = (W*D)**2 + ALPHA*TT**2.
      REAL W(N)
C        THE OBSERVATIONAL ERROR WEIGHTS.
C        (FOR DETAILS, SEE ODRPACK REFERENCE GUIDE.)
      REAL WRK2(NP)
C        A WRK2 ARRAY.
      REAL YT(N)
C         THE ARRAY -(DIAG(SQRT(OMEGA(I)),I=1,...,N)*(G1-V*INV(E)*D*G2).
      REAL ZERO
C          THE VALUE 0.0E0.
C
C
      DATA ZERO,ONE/0.0E0,1.0E0/
C
C
C***FIRST EXECUTABLE STATEMENT  SODSTP
C
C
C  COMPUTE LOOP PARAMETERS WHICH DEPEND ON WEIGHT STRUCTURE
C
C  SET UP JPVT IF ALPHA = 0
C
      IF (ALPHA.EQ.ZERO) THEN
         KP = NPP
         DO 10 I=1,NPP
            JPVT(I) = I
   10    CONTINUE
      ELSE
         IF (NPP.GE.1) THEN
            KP = NPP-IRANK
         ELSE
            KP = NPP
         END IF
      END IF
C
C  SET UP OMEGA AND TFJACB
C  (VDTD = FJACX * INV(DT) WHERE DT = (W*D)**2 + ALPHA*TT**2)
C
      CALL SIDTS(N,M,W,RHO,LDRHO,ALPHA,TT,LDTT,FJACX,LDFJX,VDTD,N)
      DO 20 I=1,N
         OMEGA(I) = SQRT(ONE+SDOT(M,VDTD(I,1),N,FJACX(I,1),LDFJX))
   20 CONTINUE
      DO 40 J=1,KP
         DO 30 I=1,N
            TFJACB(I,J) = FJACB(I,JPVT(J))/OMEGA(I)
   30    CONTINUE
   40 CONTINUE
C
C  SET UP VDTD AND YT
C  (VDTD = DDELT * INV(DT) WHERE DT = (W*D)**2 + ALPHA*TT**2)
C
      CALL SIDTS(N,M,W,RHO,LDRHO,ALPHA,TT,LDTT,DDELT,N,VDTD,N)
      DO 50 I=1,N
         VDTD(I,1) = SDOT(M,FJACX(I,1),LDFJX,VDTD(I,1),N)
         YT(I) = -(F(I)-VDTD(I,1))/OMEGA(I)
   50 CONTINUE
C
C  COMPUTE S
C
C  DO QR FACTORIZATION (WITH COLUMN PIVOTING OF TRJACB IF ALPHA = 0)
C
      IF (ALPHA.EQ.ZERO) THEN
         IPVT = 1
         DO 60 I=1,NPP
            JPVT(I) = 0
   60    CONTINUE
      ELSE
         IPVT = 0
      END IF
C
      CALL SQRDC(TFJACB,N,N,KP,QRAUX,JPVT,WRK2,IPVT)
C
C     GET TR(Q)*YT
C
      CALL SQRSL(TFJACB,N,N,KP,QRAUX,YT,DUM,YT,DUM,DUM,DUM,1000,INF)
C
C  ELIMINATE ALPHA PART USING GIVENS ROTATIONS
C
      IF (ALPHA.NE.ZERO) THEN
         CALL SZERO(NPP,1,S,NPP)
         DO 90 I=1,KP
            CALL SZERO(KP,1,WRK2,KP)
            IF (SS(1).GT.ZERO) THEN
               WRK2(I) = SQRT(ALPHA)*SS(JPVT(I))
            ELSE
               WRK2(I) = SQRT(ALPHA)*ABS(SS(1))
            END IF
            DO 80 J=I,KP
               CALL SROTG(TFJACB(J,J),WRK2(J),CO,SI)
               IF (KP-J.GE.1) THEN
                  CALL SROT(KP-J,TFJACB(J,J+1),N,WRK2(J+1),1,CO,SI)
               END IF
               TEMP = CO*YT(J) + SI*S(JPVT(I))
               S(JPVT(I)) = -SI*YT(J) + CO*S(JPVT(I))
               YT(J) = TEMP
   80       CONTINUE
   90    CONTINUE
      END IF
C
C  COMPUTE SOLUTION - ELIMINATE VARIABLES IF NECESSARY
C
      IF (NPP.GE.1) THEN
         IF (ALPHA.EQ.ZERO) THEN
            KP = NPP
C
C  ESTIMATE RCOND - U WILL CONTAIN APPROX NULL VECTOR
C
  100       CALL STRCO(TFJACB,N,KP,RCOND,U,1)
            IF (RCOND.LE.SQRT(EPSMAC)) THEN
               ELIM = .TRUE.
               IMAX = ISAMAX(KP,U,1)
C
C IMAX IS THE COLUMN TO REMOVE - USE SCHEX AND FIX JPVT
C
               IF (IMAX.NE.KP) THEN
                  CALL SCHEX(TFJACB,N,KP,IMAX,KP,YT,N,1,QRAUX,WRK2,2)
                  J = JPVT(IMAX)
                  DO 110 I=IMAX,KP-1
                     JPVT(I) = JPVT(I+1)
  110             CONTINUE
                  JPVT(KP) = J
               END IF
               KP = KP-1
            ELSE
               ELIM = .FALSE.
            END IF
            IF (ELIM .AND. KP.GE.1) THEN
               GO TO 100
            ELSE
               IRANK = NPP-KP
            END IF
         END IF
C
C  BACKSOLVE AND UNSCRAMBLE
C
         DO 120 I=KP+1,NPP
            YT(I) = ZERO
  120    CONTINUE
         IF (KP.GE.1) THEN
            CALL STRSL(TFJACB,N,KP,YT,01,INF)
         END IF
         DO 130 I=1,NPP
            S(JPVT(I)) = YT(I)
  130    CONTINUE
      END IF
C
C  COMPUTE T
C
      DO 140 I=1,N
         TEMP = F(I)+SDOT(NPP,FJACB(I,1),LDFJB,S,1)
         U(I) = (TEMP-VDTD(I,1))/(OMEGA(I)**2)
  140 CONTINUE
      DO 160 J=1,M
         DO 150 I=1,N
            T(I,J) = -(FJACX(I,J)*U(I) + DDELT(I,J))
  150    CONTINUE
  160 CONTINUE
C
C  (T = T * INV(DT) WHERE DT = (W*D)**2 + ALPHA*TT**2)
C
      CALL SIDTS(N,M,W,RHO,LDRHO,ALPHA,TT,LDTT,T,N,T,N)
C
C  COMPUTE PHI(ALPHA) FROM SCALED S AND T
C
      IF (NPP.GE.1) THEN
         CALL SDIAGS(NPP,1,SS,NPP,S,NPP,SSS,NPP)
      END IF
      CALL SDIAGS(N,M,TT,LDTT,T,N,SSS(NPP+1),N)
      PHI = SNRM2(NPP+N*M,SSS,1)
C
      RETURN
      END

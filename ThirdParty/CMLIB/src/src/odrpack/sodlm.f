*SODLM
      SUBROUTINE SODLM
     +   (N,NP,NPP,M,F,FJACB,LDFJB,FJACX,LDFJX,
     +   W,RHO,LDRHO,SS,TT,LDTT,DDELT,
     +   ALPHA2,TAU,EPSMAC,
     +   SSS,WRK1,TFJACB,OMEGA,YT,
     +   U,QRAUX,WRK2,JPVT,
     +   S,T,NLMS,RCOND,IRANK)
C***BEGIN PROLOGUE  SODLM
C***REFER TO  SODR,SODRC
C***ROUTINES CALLED  SDIAGI,SDOT,SNRM2,SODSTP
C***DATE WRITTEN   860529   (YYMMDD)
C***REVISION DATE  870204   (YYMMDD)
C***CATEGORY NO.  G2E,I1B1
C***KEYWORDS  ORTHOGONAL DISTANCE REGRESSION,
C             NONLINEAR LEAST SQUARES,
C             ERRORS IN VARIABLES
C***AUTHOR  BOGGS, PAUL T.
C             OPTIMIZATION GROUP/SCIENTIFIC COMPUTING DIVISION
C             NATIONAL BUREAU OF STANDARDS, GAITHERSBURG, MD 20899
C           BYRD, RICHARD H.
C             DEPARTMENT OF COMPUTER SCIENCE
C             UNIVERSITY OF COLORADO, BOULDER, CO 80309
C           DONALDSON, JANET R.
C             OPTIMIZATION GROUP/SCIENTIFIC COMPUTING DIVISION
C             NATIONAL BUREAU OF STANDARDS, BOULDER, CO 80303-3328
C           SCHNABEL, ROBERT B.
C             DEPARTMENT OF COMPUTER SCIENCE
C             UNIVERSITY OF COLORADO, BOULDER, CO 80309
C             AND
C             OPTIMIZATION GROUP/SCIENTIFIC COMPUTING DIVISION
C             NATIONAL BUREAU OF STANDARDS, BOULDER, CO 80303-3328
C***PURPOSE  COMPUTE LEVENBERG-MARQUARDT PARAMETER AND STEPS S AND T
C            USING ANALOG OF THE TRUST-REGION LEVENBERG-MARQUARDT
C            ALGORITHM
C***END PROLOGUE  SODLM
C
C  FUNCTION DECLARATIONS
C
      REAL SDOT
      REAL SNRM2
C
C  VARIABLE DECLARATIONS (ALPHABETICALLY)
C
      REAL ALPHAN
C        THE NEW LEVENBERG-MARQUARDT PARAMETER.
      REAL ALPHA1
C        THE PREVIOUS LEVENBERG-MARQUARDT PARAMETER.
      REAL ALPHA2
C        THE CURRENT LEVENBERG-MARQUARDT PARAMETER.
      REAL BOT
C        THE LOWER LIMIT FOR SETTING ALPHA.
      REAL DDELT(N,M)
C        THE ARRAY (W*D)**2 * DELTA.
      REAL EPSMAC
C        THE VALUE OF MACHINE PRECISION.
      REAL F(N)
C        THE (WEIGHTED) ESTIMATED VALUES OF EPSILON.
      REAL FJACB(LDFJB,NP)
C        THE JACOBIAN WITH RESPECT TO BETA.
      REAL FJACX(LDFJX,M)
C        THE JACOBIAN WITH RESPECT TO X.
      INTEGER I
C        AN INDEXING VARIABLE.
      INTEGER IRANK
C        THE RANK DEFICIENCY OF THE JACOBIAN WRT BETA.
      INTEGER J
C        AN INDEXING VARIABLE.
      INTEGER JPVT(NP)
C        THE PIVOT VECTOR.
      INTEGER LDFJB
C        THE LEADING DIMENSION OF ARRAY FJACB.
      INTEGER LDFJX
C        THE LEADING DIMENSION OF ARRAY FJACX.
      INTEGER LDRHO
C        THE LEADING DIMENSION OF ARRAY RHO.
C        (FOR DETAILS, SEE ODRPACK REFERENCE GUIDE.)
      INTEGER LDTT
C        THE LEADING DIMENSION OF ARRAY TT.
      INTEGER M
C        THE NUMBER OF COLUMNS OF DATA IN THE INDEPENDENT VARIABLE.
C        (FOR DETAILS, SEE ODRPACK REFERENCE GUIDE.)
      INTEGER N
C        THE NUMBER OF OBSERVATIONS.
C        (FOR DETAILS, SEE ODRPACK REFERENCE GUIDE.)
      INTEGER NLMS
C        THE NUMBER OF LEVENBERG-MARQUARDT STEPS TAKEN.
      INTEGER NP
C        THE NUMBER OF FUNCTION PARAMETERS.
C        (FOR DETAILS, SEE ODRPACK REFERENCE GUIDE.)
      INTEGER NPP
C        THE NUMBER OF FUNCTION PARAMETERS ACTUALLY BEING ESTIMATED.
      REAL OMEGA(N)
C        THE ARRAY (I-FJACX*INV(P)*TRANS(FJACX))**(-1/2)  WHERE
C        P = TRANS(FJACX)*FJACX + D**2 + ALPHA*TT**2
      REAL P001
C        THE VALUE 0.001E0
      REAL P1
C        THE VALUE 0.1E0
      REAL PHI1
C        THE PREVIOUS DIFFERENCE BETWEEN THE NORM OF THE SCALED STEP
C        AND THE TRUST REGION DIAMETER.
      REAL PHI2
C        THE CURRENT DIFFERENCE BETWEEN THE NORM OF THE SCALED STEP
C        AND THE TRUST REGION DIAMETER.
      REAL QRAUX(N)
C        THE ARRAY REQUIRED TO RECOVER THE ORTHOGONAL PART OF THE
C        Q-R DECOMPOSITION.
      REAL RCOND
C        THE APPROXIMATE RECIPROCAL CONDITION OF TFJACB.
      REAL RHO(LDRHO,M)
C        THE DELTA WEIGHTS.
C        (FOR DETAILS, SEE ODRPACK REFERENCE GUIDE.)
      REAL S(NP)
C        THE STEP FOR THE ESTIMATED BETA'S.
      REAL SA
C        THE SCALAR PHI2*(ALPHA1-ALPHA2)/(PHI1-PHI2).
      REAL SS(NP)
C        THE SCALE USED FOR THE ESTIMATED BETA'S.
C        (FOR DETAILS, SEE ODRPACK REFERENCE GUIDE.)
      REAL SSS(N+N*M)
C        THE ARRAY USED TO COMPUTED VARIOUS SUMS-OF-SQUARES.
      REAL T(N,M)
C        THE STEP FOR THE ESTIMATED DELTA'S.
      REAL TAU
C        THE TRUST REGION DIAMETER.
      REAL TFJACB(N,NP)
C        THE ARRAY INV(DIAG(SQRT(OMEGA(I)),I=1,...,N))*FJACB.
      REAL TOP
C        THE UPPER LIMIT FOR SETTING ALPHA.
      REAL TT(LDTT,M)
C        THE SCALE USED FOR THE DELTA'S.
C        (FOR DETAILS, SEE ODRPACK REFERENCE GUIDE.)
      REAL U(N)
C        THE APPROXIMATE NULL VECTOR FOR TFJACB.
      REAL W(N)
C        THE OBSERVATIONAL ERROR WEIGHTS.
C        (FOR DETAILS, SEE ODRPACK REFERENCE GUIDE.)
      REAL WRK1(N,M)
C        A WORK ARRAY.
      REAL WRK2(NP)
C        A WORK ARRAY.
      REAL YT(N)
C         THE ARRAY -(DIAG(SQRT(OMEGA(I)),I=1,...,N)*(G1-V*INV(E)*D*G2).
      REAL ZERO
C          THE VALUE 0.0E0.
C
C
      DATA ZERO,P001,P1 /0.0E0,0.001E0,0.1E0/
C
C
C***FIRST EXECUTABLE STATEMENT  SODLM
C
C
C  COMPUTE FULL GAUSS-NEWTON STEP (ALPHA=0)
C
      ALPHA1 = ZERO
      CALL SODSTP(N,NP,NPP,M,F,FJACB,LDFJB,FJACX,LDFJX,
     +            W,RHO,LDRHO,SS,TT,LDTT,DDELT,
     +            ALPHA1,EPSMAC,
     +            SSS,TFJACB,WRK1,OMEGA,
     +            YT,U,QRAUX,WRK2,
     +            JPVT,S,T,PHI1,IRANK,
     +            RCOND)
C
C  INITIALIZE TAU IF NECESSARY
C
      IF (TAU.LT.ZERO) THEN
         TAU = ABS(TAU)*PHI1
      END IF
C
C  CHECK IF FULL GAUSS-NEWTON STEP IS OPTIMAL
C
      IF ((PHI1-TAU).LE.P1*TAU) THEN
         NLMS = 1
         ALPHA2 = ZERO
         RETURN
      END IF
C
C  FULL GAUSS-NEWTON STEP IS OUTSIDE TRUST REGION -
C  FIND LOCALLY CONSTRAINED OPTIMAL STEP
C
      PHI1 = PHI1 - TAU
C
C  INITIALIZE UPPER AND LOWER BOUNDS FOR ALPHA
C
      BOT = ZERO
C
      IF (NPP.GE.1) THEN
         DO 10 I=1,NPP
            SSS(I) = SDOT(N,FJACB(1,I),1,F,1)
   10    CONTINUE
         CALL SDIAGI(NPP,1,SS,NPP,SSS,NPP,SSS,NPP)
      END IF
      DO 30 J=1,M
         DO 20 I=1,N
            WRK1(I,J) = FJACX(I,J)*F(I) + DDELT(I,J)
   20    CONTINUE
   30 CONTINUE
      CALL SDIAGI(N,M,TT,LDTT,WRK1,N,SSS(1+NPP),N)
      TOP = SNRM2(NPP+N*M,SSS,1)/TAU
      IF (ALPHA2.GT.TOP .OR. ALPHA2.EQ.ZERO) THEN
         ALPHA2 = P001*TOP
      END IF
C
C  MAIN LOOP
C
      DO 40 I=1,10
C
C  COMPUTE LOCALLY CONSTRAINED STEPS S AND T AND PHI(ALPHA) FOR
C  CURRENT VALUE OF ALPHA
C
         CALL SODSTP(N,NP,NPP,M,F,FJACB,LDFJB,FJACX,LDFJX,
     +               W,RHO,LDRHO,SS,TT,LDTT,DDELT,
     +               ALPHA2,EPSMAC,
     +               SSS,TFJACB,WRK1,OMEGA,
     +               YT,U,QRAUX,WRK2,
     +               JPVT,S,T,PHI2,IRANK,
     +               RCOND)
         PHI2 = PHI2-TAU
C
C  CHECK WHETHER CURRENT STEP IS OPTIMAL
C
         IF (ABS(PHI2).LE.P1*TAU .OR.
     +      (ALPHA2.EQ.BOT .AND. PHI2.LT.ZERO)) THEN
            NLMS = I+1
            RETURN
         END IF
C
C  CURRENT STEP IS NOT OPTIMAL
C
C  UPDATE BOUNDS FOR ALPHA AND COMPUTE NEW ALPHA
C
         IF (PHI1-PHI2.EQ.ZERO) THEN
            NLMS = 12
            RETURN
         END IF
         SA = PHI2*(ALPHA1-ALPHA2)/(PHI1-PHI2)
         IF (PHI2.LT.ZERO) THEN
            TOP = MIN(TOP,ALPHA2)
         ELSE
            BOT = MAX(BOT,ALPHA2)
         END IF
         IF (PHI1*PHI2.GT.ZERO) THEN
            BOT = MAX(BOT,ALPHA2-SA)
         ELSE
            TOP = MIN(TOP,ALPHA2-SA)
         END IF
C
         ALPHAN = ALPHA2 - SA*(PHI1+TAU)/TAU
         IF (ALPHAN.GE.TOP .OR. ALPHAN.LE.BOT) THEN
            ALPHAN = MAX(P001*TOP,SQRT(TOP*BOT))
         END IF
C
C  GET READY FOR NEXT ITERATION
C
         ALPHA1 = ALPHA2
         ALPHA2 = ALPHAN
         PHI1 = PHI2
   40 CONTINUE
C
C  SET NLMS TO INDICATE AN OPTIMAL STEP COULD NOT BE FOUND IN 10 TRYS
C
      NLMS = 12
C
      RETURN
      END

      SUBROUTINE DITTO(MM, M, N, A, CLAB, RLAB, TITLE, KL, IWORK1,
     *                 DMIWRK, IWORK2, DMCWRK, CWORK, OUNIT)
C
C<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
C
C   PURPOSE
C   -------
C
C      PARTITIONS CATEGORICAL DATA INTO CLUSTERS BY MAXIMIZING THE
C      MATCHES BETWEEN CASES IN A CLUSTER AND THE CLUSTER MODE
C
C   DESCRIPTION
C   -----------
C
C   1.  THE DATA MATRIX A MUST BE A MATRIX OF ONE-CHARACTER VARIABLES
C       WHICH CLASSIFIES THE VALUES INTO CATEGORIES.  THE CATEGORIES
C       CAN BE ANY CHARACTER EXCEPT ZERO ('0') AND DASH ('-').  ANY
C       MISSING VALUES SHOULD BE REPRESENTED BY THE CHARACTER '-'.  KL
C       IS THE NUMBER OF DIFFERENT CHARACTERS USED TO CATEGORIZE THE
C       DATA WHICH MUST INCLUDE THE MISSING CHARACTER SIGN IF USED.
C
C   2.  THE OUTPUT IS WRITTEN ON FORTRAN UNIT OUNIT AND STARTS WITH A
C       LIST OF THE VARIABLES ON SEPARATE LINES.  THE FIRST VARIABLE
C       WILL CORRESPOND TO THE FIRST COLUMN OF CATEGORY VALUES, THE
C       SECOND VARIABLE WILL CORRESPOND TO THE SECOND COLUMN OF
C       CATEGORY VALUES, ETC.  THE FIRST ROW WILL BE THE GRAND MODE OF
C       THE DATA, AND EACH CLUSTER WILL THEN BE PRINTED IN SUCCESSION.
C       THE FIRST ROW IN EACH CLUSTER WILL BE THE CLUSTER MODE.  IF ANY
C       CLUSTER MODE VALUES MATCH THEIR CORRESPONDING GRAND MODE
C       VALUES, THEY ARE REPLACED BY A DOT.  THEN EACH CASE IN THE
C       CLUSTER WILL BE PRINTED ALONG WITH ITS VALUES.  IF ANY OF THE
C       CASE'S VALUES MATCH THEIR CORRESPONDING CLUSTER MODE VALUES,
C       THEY ARE REPLACED BY A DOT.
C
C   3.  NOTE; DITTO INITIALLY PARTITIONS THE CASES INTO CLUSTERS AND
C       COMBINES SINGLE-CASE CLUSTERS INTO LARGER ONES.  THEREFORE, IF
C       THE INITIAL PARTITION HAS EACH CASE IN A DIFFERENT CLUSTER,
C       DITTO WILL COMBINE ALL CASES INTO ONE BIG CLUSTER.  THEREFORE,
C       THE USER MUST BE CAREFUL NOT TO CHOOSE A LARGE NUMBER OF
C       CATEGORIES SUCH THAT VERY FEW CASES ARE SIMILAR.
C
C   INPUT PARAMETERS
C   ----------------
C
C   MM    INTEGER SCALAR (UNCHANGED ON OUTPUT).
C         THE FIRST DIMENSION OF THE MATRIX A.  MUST BE AT LEAST M.
C
C   M     INTEGER SCALAR (UNCHANGED ON OUTPUT).
C         THE NUMBER OF CASES.
C
C   N     INTEGER SCALAR (UNCHANGED ON OUTPUT).
C         THE NUMBER OF VARIABLES.
C
C   A     MATRIX OF 1-CHARACTER VARIABLES WHOSE FIRST DIMENSION MUST BE
C            MM AND WHOSE SECOND DIMENSION MUST BE AT LEAST N (UNCHANGED
C            ON OUTPUT).
C         THE MATRIX OF CATEGORY VALUES.
C
C   CLAB  VECTOR OF 4-CHARACTER VARIABLES DIMENSIONED AT LEAST N.
C            (UNCHANGED ON OUTPUT).
C         THE LABELS OF THE VARIABLES.
C
C   RLAB  VECTOR OF 4-CHARACTER VARIABLES DIMENSIONED AT LEAST N.
C            (UNCHANGED ON OUTPUT).
C         THE LABELS OF THE CASES.
C
C   TITLE 10-CHARACTER VARIABLE (UNCHANGED ON OUTPUT).
C         TITLE OF THE DATA SET.
C
C   KL    INTEGER SCALAR (UNCHANGED ON OUTPUT).
C         THE NUMBER OF CATEGORIES.
C
C   IWORK1 INTEGER VECTOR DIMENSIONED AT LEAST KL*N+M+1.
C         WORK VECTOR.
C
C   DMCWRK INTEGER SCALAR (UNCHANGED ON OUTPUT).
C         THE LEADING DIMENSION OF ARRAY CWORK.  MUST BE AT LEAST
C         KL*(N+1)+1.
C
C   CWORK MATRIX OF 1-CHARACTER VARIABLES WHOSE FIRST DIMENSION MUST BE
C            DMCWRK AND WHOSE SECOND DIMENSION MUST BE AT LEAST N.
C         WORK MATRIX.
C
C   DMIWRK INTEGER SCALAR (UNCHANGED ON OUTPUT).
C         THE LEADING DIMENSION OF ARRAY IWORK2.  MUST BE AT LEAST KL.
C
C   IWORK2 INTEGER MATRIX WHOSE FIRST DIMENSION MUST BE DMIWRK AND WHOSE
C            SECOND DIMENSION MUST BE AT LEAST N.
C         WORK MATRIX.
C
C   OUNIT INTEGER SCALAR (UNCHANGED ON OUTPUT).
C         UNIT NUMBER FOR OUTPUT.
C
C   REFERENCE
C   ---------
C
C     HARTIGAN, J. A. (1975).  CLUSTERING ALGORITHMS, JOHN WILEY &
C        SONS, INC., NEW YORK.  PAGES 143-154.
C
C<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
C
      INTEGER OUNIT, DMCWRK, DMIWRK, X, YM, Z, IWORK1(*),
     *        IWORK2(DMIWRK,*)
      CHARACTER*1 A(MM,*), CWORK(DMCWRK,*)
      CHARACTER*4 CLAB(*), RLAB(*)
      CHARACTER*10 TITLE
C
      KC = KL * N + 1
      X = 0
      Z = X + KC
      LC = 0
      LK = LC + M
C
C     FIND DIFFERENT VALUES TAKEN BY VARIABLES
C
      DO 10 I=1,M
   10    IWORK1(LC+I)=0
      DO 20 K=1,KC
         DO 19 I = 1 , N
   19       CWORK(X+K,I)='0'
   20    IWORK1(LK+K)=1
      DO 30 J=1,N
         DO 30 K=1,KL
   30       CWORK(Z+K,J)='0'
      DO 60 J=1,N
         DO 50 I=1,M
            DO 40 K=1,KL
               IF(CWORK(Z+K,J).EQ.'0') CWORK(Z+K,J)=A(I,J)
               IF(CWORK(Z+K,J).EQ.A(I,J)) GO TO 50
   40       CONTINUE
   50    CONTINUE
   60 CONTINUE
C
C     ITERATIVELY COMPUTE MODES
C
      DO 250 ITER = 1 , 6
         DO 120 J=1,N
            DO 120 K=1,KL
C
C     IGNORE MISSING VALUES
C
               IF (CWORK(Z+K,J) .EQ. '-') GOTO 120
               DO 70 JJ=1,N
                  DO 70 KK=1,KL
   70                IWORK2(KK,JJ)=0
               KT=K+1+(J-1)*KL
               IF(IWORK1(LK+KT).NE.0.AND.CWORK(Z+K,J).NE.'0') THEN
C
C     COUNT CATAGORIES FOR THE J-TH VARIABLE
C
                  DO 90 I=1,M
                     IF((ITER.NE.1.OR.A(I,J).EQ.CWORK(Z+K,J)).AND.
     *                  (ITER.EQ.1.OR.IWORK1(LC+I).EQ.KT)) THEN
                        DO 80 JJ=1,N
                           DO 80 KK=1,KL
   80                         IF(A(I,JJ).EQ.CWORK(Z+KK,JJ))
     *                               IWORK2(KK,JJ)=IWORK2(KK,JJ)+1
                     ENDIF
   90             CONTINUE
C
C     FIND CATAGORY MODE FOR EACH VARIABLE
C
                  DO 110 JJ=1,N
                     YM=IWORK2(1,JJ)
                     KM=1
                     DO 100 KK=1,KL
                        IF(IWORK2(KK,JJ).GT.YM) THEN
                           YM=IWORK2(KK,JJ)
                           KM=KK
                        ENDIF
  100                CONTINUE
  110             CWORK(X+KT,JJ)=CWORK(Z+KM,JJ)
               ENDIF
  120    CONTINUE
C
C     DETERMINE GRAND MODE
C
C     COUNT CATAGORIES OF THE CLUSTER MODES FOR EACH VARIABLE
C
         DO 170 J=1,N
            DO 130 K=1,KL
  130          IWORK2(K,J)=0
            DO 150 K=2,KT
               IF(IWORK1(LK+K).NE.0) THEN
                  DO 140 KK=1,KL
  140                IF(CWORK(X+K,J).EQ.CWORK(Z+KK,J).AND.
     *                  CWORK(Z+KK,J).NE.'0')IWORK2(KK,J)=IWORK2(KK,J)+1
               ENDIF
  150       CONTINUE
C
C     FIND CATAGORY MODE FOR EACH OF THE VARIABLES
C
            YM=IWORK2(1,J)
            CWORK(X+1,J)=CWORK(Z+1,J)
            DO 160 KK=1,KL
               IF(IWORK2(KK,J).GT.YM) THEN
                  YM=IWORK2(KK,J)
                  CWORK(X+1,J)=CWORK(Z+KK,J)
               ENDIF
  160       CONTINUE
  170    CONTINUE
C
C     REASSIGN CASES
C
         DO 200 I=1,M
            DM=R1MACH(2)
            KM=1
            DO 190 K=2,KT
               IF(IWORK1(LK+K).NE.0.AND.(ITER.EQ.1.OR.IWORK1(LK+K).GT.1
     *            ))THEN
                  DD=0.
                  DO 180 J=1,N
  180                IF(A(I,J).NE.CWORK(X+K,J)) DD=DD+1.
                  IF(DD.LT.DM) THEN
                     KM=K
                     DM=DD
                  ENDIF
               ENDIF
  190       CONTINUE
  200    IWORK1(LC+I)=KM
C
C     COUNT CASES IN CLUSTERS
C
         DO 210 K=1,KC
  210       IWORK1(LK+K)=0
         DO 220 I=1,M
            K=IWORK1(LC+I)
  220       IWORK1(LK+K)=IWORK1(LK+K)+1
C
C     DELETE EMPTY CLUSTERS
C
         DO 240 K=2,KC
            IF(IWORK1(LK+K).EQ.0) THEN
               DO 230 J=1,N
  230             CWORK(X+K,J)='0'
            ENDIF
  240    CONTINUE
  250 CONTINUE
      IF (OUNIT .GT. 0) CALL DITOUT(MM,M,N,A,CLAB,RLAB,TITLE,DMCWRK,
     *                              CWORK(X+1,1),KC,IWORK1(LC+1),OUNIT)
      RETURN
      END

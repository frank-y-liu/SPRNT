      SUBROUTINE MMFIT(M, VAR, K, MT, NVAL, DMIWRK, IWORK, IERR, OUNIT)
C
C<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
C
C   PURPOSE
C   -------
C
C      FINDS THE MINIMUM MUTATION FIT OF A VARIABLE TO A TREE
C
C   INPUT PARAMETERS
C   ----------------
C
C   M     INTEGER SCALAR (UNCHANGED ON OUTPUT).
C         THE NUMBER OF OBJECTS.
C
C   VAR   REAL VECTOR DIMENSIONED AT LEAST K (CHANGED ON OUTPUT).
C         VAR(I) FOR I=1,...,M IS THE CATEGORY VALUE FOR CASE I FOR THE
C            VARIABLE.
C
C   K     INTEGER SCALAR (UNCHANGED ON OUTPUT).
C         THE NUMBER OF NODES IN THE TREE.
C
C   MT    INTEGER VECTOR DIMENSIONED AT LEAST K (CHANGED ON OUTPUT).
C         MT(I) STORES THE NODE THAT IS THE DIRECT ANCESTOR OF NODE I IN
C            THE TREE.  (UPDATED DURING ROUTINE).
C
C   NVAL  INTEGER SCALAR (UNCHANGED ON OUTPUT).
C         MAXIMUM VALUE OF VAR.
C
C   DMIWRK INTEGER SCALAR (UNCHANGED ON OUTPUT).
C         THE FIRST DIMENSION OF THE MATRIX IWORK.  MUST BE AT LEAST K.
C
C   IWORK INTEGER MATRIX WHOSE FIRST DIMENSION MUST BE DMIWRK AND SECOND
C            DIMENSION MUST BE AT LEAST NVAL.
C         WORK MATRIX.
C
C   OUNIT INTEGER SCALAR (UNCHANGED ON OUTPUT).
C         UNIT NUMBER FOR ERROR MESSAGES.
C
C   OUTPUT PARAMETER
C   ----------------
C
C   VAR   REAL VECTOR DIMENSIONED AT LEAST K.
C         VAR(I) FOR I=1,...,K IS THE FITTED VALUE FOR NODE I.
C
C   IERR  INTEGER SCALAR.
C         ERROR FLAG.
C
C         IERR = 0, NO ERRORS WERE DETECTED DURING EXECUTION
C
C         IERR = 4, A VALUE OF THE VARIABLE IS GREATER THAN THE MAXIMUM
C                   VALUE.  INCREASE THE VALUE OF NVAL.
C
C   REFERENCES
C   ----------
C
C     HARTIGAN, J. A. (1975).  CLUSTERING ALGORITHMS, JOHN WILEY &
C        SONS, INC., NEW YORK.  PAGE 247.
C
C     HARTIGAN, J. A. (1972).  "MINIMUM MUTATION FITS TO A GIVEN TREE"
C        BIOMETRICS.  VOL. 29, PAGES 53-65.
C
C<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
C
      INTEGER DMIWRK, OUNIT
      DIMENSION VAR(*), IWORK(DMIWRK,*), MT(*)
C
C     CHECK RANGE OF VAR
C
      DO 10 I=1,M
         IF(VAR(I).LT.1..OR.VAR(I).GT.NVAL) THEN
            IF (OUNIT .GT. 0) WRITE(OUNIT,1) I
            IERR=4
         ENDIF
   10 CONTINUE
    1 FORMAT(I5,' TH VALUE OF VARIABLE OUT OF RANGE')
      IF(IERR.NE.0) RETURN
C
C     OPTIMAL ASSIGNMENT TO NODES IGNORING REST OF TREE
C
      DO 20 I=M+1,K
   20    VAR(I)=0.
      DO 30 I=1,K
         DO 30 J=1,NVAL
   30       IWORK(I,J)=0
      DO 40 I=1,M
         J=INT(VAR(I))
   40    IWORK(I,J)=1
      DO 80 I=1,K
         IMAX=0
         DO 50 J=1,NVAL
   50       IF(IWORK(I,J).GT.IMAX) IMAX=IWORK(I,J)
         DO 60 J=1,NVAL
            IF(IWORK(I,J).LT.IMAX) IWORK(I,J)=0
   60       IF(IWORK(I,J).NE.0) IWORK(I,J)=1
         IF(I.NE.K) THEN
            II=MT(I)
            DO 70 J=1,NVAL
   70          IWORK(II,J)=IWORK(II,J)+IWORK(I,J)
         ENDIF
   80 CONTINUE
C
C     FIND OPTIMAL ASSIGNMENT OVER WHOLE TREE
C
      DO 90 I=1,K
         II=K-I+1
         IT=MT(II)
         DO 90 J=1,NVAL
   90       IF((VAR(II).EQ.0..OR.INT(VAR(IT)).EQ.J).AND.IWORK(II,J).EQ.1
     *         ) VAR(II)=J
      RETURN
      END

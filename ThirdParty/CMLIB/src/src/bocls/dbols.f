      SUBROUTINE DBOLS(W,MDW,MROWS,NCOLS, BL,BU,IND,
     *  IOPT,X,RNORM,MODE,RW,IW)
C
C     SOLVE LINEAR LEAST SQUARES SYSTEM WITH BOUNDS ON
C     SELECTED VARIABLES.
C     REVISED 821222-1250
C     REVISED YYMMDD-HHMM
      DOUBLE PRECISION              W(MDW,*), BL(*),BU(*), X(*),RW(*)
C
C     THIS VARIABLE SHOULD REMAIN TYPE REAL.
      REAL RDUM
      INTEGER    IND(*),IOPT(*),IW(*)
      LOGICAL CHECKL
      SAVE IGO,LOCACC,LOPT,ISCALE
      DATA IGO/0/
      LEVEL=1
      IF (.NOT.(IGO.EQ.0)) GO TO 20002
      GO TO 30001
20005 CONTINUE
      GO TO 30002
20006 IF (.NOT.(CHECKL)) GO TO 20007
      GO TO 30003
20010 CONTINUE
20007 CONTINUE
20002 NX0013=IGO
      IF (NX0013.LT.1.OR.NX0013.GT.2) GO TO 20013
      GO TO (20011,20012), NX0013
C
C     GO BACK TO THE USER FOR ACCUMULATION OF LEAST SQUARES
C     EQUATIONS AND DIRECTIONS TO QUIT PROCESSING.
20011 CONTINUE
      GO TO 30004
20015 IF (.NOT.(IGO.EQ.2)) GO TO 20016
      IGO=0
20016 GO TO 20014
20012 CONTINUE
      GO TO 30005
20019 CONTINUE
      GO TO 30006
20020 IGO=0
20013 CONTINUE
20014 RETURN
C     PROCEDURE(CHECK LENGTHS OF ARRAYS)
C
C     THIS FEATURE ALLOWS THE USER TO MAKE SURE THAT THE
C     ARRAYS ARE LONG ENOUGH FOR THE INTENDED PROBLEM SIZE AND USE.
30003 IF (.NOT.(LMDW.LT.MROWS)) GO TO 20021
      NERR=11
      NCHAR=76
      CALL XERRWV('DBOLS(). THE ROW DIMENSION OF W(,)=(I1) MUST BE .GE.
     *THE NUMBER OF ROWS=(I2).',NCHAR,NERR,LEVEL,
     * 2,LMDW,MROWS, 0,RDUM,RDUM)
      ASSIGN 20024 TO NPR007
      GO TO 30007
20024 CONTINUE
20021 IF (.NOT.(LNDW.LT.NCOLS+1)) GO TO 20025
      NERR=12
      NCHAR=69
      CALL XERRWV('DBOLS(). THE COLUMN DIMENSION OF W(,)=(I1) MUST BE .G
     *E. NCOLS+1=(I2).',NCHAR,NERR,LEVEL,
     * 2,LNDW,NCOLS+1, 0,RDUM,RDUM)
      ASSIGN 20028 TO NPR007
      GO TO 30007
20028 CONTINUE
20025 IF (.NOT.(LLB.LT.NCOLS)) GO TO 20029
      NERR=13
      NCHAR=88
      CALL XERRWV('DBOLS(). THE DIMENSIONS OF THE ARRAYS BL(),BU(), AND
     * IND()=(I1) MUST BE .GE. NCOLS=(I2).',NCHAR,NERR,LEVEL,
     * 2,LLB,NCOLS, 0,RDUM,RDUM)
      ASSIGN 20032 TO NPR007
      GO TO 30007
20032 CONTINUE
20029 IF (.NOT.(LLX.LT.LENX)) GO TO 20033
      NERR=14
      NCHAR=70
      CALL XERRWV('DBOLS(). THE DIMENSION OF X()=(I1) MUST BE .GE. THE R
     *EQD. LENGTH=(I2).',NCHAR,NERR,LEVEL,
     * 2,LLX,LENX, 0,RDUM,RDUM)
      ASSIGN 20036 TO NPR007
      GO TO 30007
20036 CONTINUE
20033 IF (.NOT.(LLRW.LT.5*NCOLS)) GO TO 20037
      NERR=15
      NCHAR=62
      CALL XERRWV('DBOLS(). THE DIMENSION OF RW()=(I1) MUST BE .GE. 5*NC
     *OLS=(I2).',NCHAR,NERR,LEVEL,
     * 2,LLRW,5*NCOLS, 0,RDUM,RDUM)
      ASSIGN 20040 TO NPR007
      GO TO 30007
20040 CONTINUE
20037 IF (.NOT.(LLIW.LT.2*NCOLS)) GO TO 20041
      NERR=16
      NCHAR=61
      CALL XERRWV('DBOLS() THE DIMENSION OF IW()=(I1) MUST BE .GE. 2*NCO
     *LS=(I2).',NCHAR,NERR,LEVEL,
     * 2,LLIW,2*NCOLS,0,RDUM,RDUM)
      ASSIGN 20044 TO NPR007
      GO TO 30007
20044 CONTINUE
20041 IF (.NOT.(LIOPT.LT.LP+1)) GO TO 20045
      NERR=17
      NCHAR=71
      CALL XERRWV('DBOLS(). THE DIMENSION OF IOPT()=(I1) MUST BE .GE. TH
     *E REQD. LEN.=(I2).',NCHAR,NERR,LEVEL,
     * 2,LIOPT,LP+1,0,RDUM,RDUM)
      ASSIGN 20048 TO NPR007
      GO TO 30007
20048 CONTINUE
20045 GO TO 20010
C     PROCEDURE(CHECK VALIDITY OF INPUT DATA)
C
C     SEE THAT MDW IS .GT.0. GROSS CHECK ONLY.
30001 IF (.NOT.(MDW.LE.0)) GO TO 20049
      NERR=2
      NCHAR=35
      CALL XERRWV('DBOLS(). MDW=(I1) MUST BE POSITIVE.',
     * NCHAR,NERR,LEVEL,
     * 1,MDW,IDUM,0,RDUM,RDUM)
      ASSIGN 20052 TO NPR007
      GO TO 30007
20052 CONTINUE
C
C     SEE THAT NUMBER OF UNKNOWNS IS POSITIVE.
20049 IF (.NOT.(NCOLS.LE.0)) GO TO 20053
      NERR=3
      NCHAR=58
      CALL XERRWV('DBOLS(). NCOLS=(I1) THE NO. OF VARIABLES MUST BE POSI
     *TIVE.', NCHAR,NERR,LEVEL,
     * 1,NCOLS,IDUM,0,RDUM,RDUM)
      ASSIGN 20056 TO NPR007
      GO TO 30007
20056 CONTINUE
C
C     SEE THAT CONSTRAINT INDICATORS ARE ALL WELL-DEFINED.
20053 J=1
      N20057=NCOLS
      GO TO 20058
20057 J=J+1
20058 IF ((N20057-J).LT.0) GO TO 20059
      IF (.NOT.(IND(J).LT.1 .OR. IND(J).GT.4)) GO TO 20061
      NERR=4
      NCHAR=45
      CALL XERRWV('DBOLS(). FOR J=(I1), IND(J)=(I2) MUST BE 1-4.',
     * NCHAR,NERR,LEVEL,
     * 2,J,IND(J),0,RDUM,RDUM)
      ASSIGN 20064 TO NPR007
      GO TO 30007
20064 CONTINUE
20061 GO TO 20057
C
C     SEE THAT BOUNDS ARE CONSISTENT.
20059 J=1
      N20065=NCOLS
      GO TO 20066
20065 J=J+1
20066 IF ((N20065-J).LT.0) GO TO 20067
      IF (.NOT.(IND(J).EQ.3)) GO TO 20069
      IF (.NOT.(BL(J) .GT. BU(J))) GO TO 20072
      NERR=5
      NCHAR=57
      CALL XERRWV('DBOLS(). FOR J=(I1), BOUND BL(J)=(R1) IS .GT. BU(J)=(
     *R2).', NCHAR,NERR,LEVEL,
     * 1,J,IDUM, 2,BL(J),BU(J))
      ASSIGN 20075 TO NPR007
      GO TO 30007
20075 CONTINUE
20072 CONTINUE
20069 GO TO 20065
20067 GO TO 20005
C     PROCEDURE(SOLVE BOUNDED LEAST SQUARES PROBLEM)
C
C     INITIALIZE IBASIS(*), J=1,NCOLS, AND IBB(*), J=1,NCOLS,
C     TO =J,=1, FOR USE IN DBOLSM( ).
30006 J=1
      N20076=NCOLS
      GO TO 20077
20076 J=J+1
20077 IF ((N20076-J).LT.0) GO TO 20078
      IW(J)=J
      IW(J+NCOLS)=1
      RW(3*NCOLS+J)=BL(J)
      RW(4*NCOLS+J)=BU(J)
      GO TO 20076
20078 CALL DBOLSM(W,MDW,MROWS,NCOLS,RW(3*NCOLS+1),RW(4*NCOLS+1),IND,
     *IOPT(LOPT),X,RNORM,MODE,RW(NCOLS+1),RW(2*NCOLS+1),RW,
     *IW,IW(NCOLS+1))
      GO TO 20020
C     PROCEDURE(PROCESS OPTION ARRAY)
30002 ZERO=0.E0
      ONE=1.E0
      CHECKL=.FALSE.
      LENX=NCOLS
      ISCALE=1
      IGO=2
      LOPT=0
      LP=0
      LDS=0
20080 LP=LP+LDS
      IP=IOPT(LP+1)
      JP=IABS(IP)
C
C     TEST FOR NO MORE OPTIONS.
      IF (.NOT.(IP.EQ.99)) GO TO 20082
      IF(LOPT.EQ.0)LOPT=LP+1
      GO TO 20081
20082 IF (.NOT.(JP.EQ.99)) GO TO 10001
      LDS=1
      GO TO 20080
10001 IF (.NOT.(JP.EQ.1)) GO TO 10002
      IF (.NOT.(IP.GT.0)) GO TO 20085
C
C     SET UP DIRECTION FLAG, ROW STACKING POINTER
C     LOCATION, AND LOCATION FOR NUMBER OF NEW ROWS.
      LOCACC=LP+2
C
C                  IOPT(LOCACC-1)=OPTION NUMBER FOR SEQ. ACCUMULATION.
C     CONTENTS..   IOPT(LOCACC  )=USER DIRECTION FLAG, 1 OR 2.
C                  IOPT(LOCACC+1)=ROW STACKING POINTER.
C                  IOPT(LOCACC+2)=NUMBER OF NEW ROWS TO PROCESS.
C     USER ACTION WITH THIS OPTION..
C      (SET UP OPTION DATA FOR SEQ. ACCUMULATION IN IOPT(*).
C      MUST ALSO START PROCESS WITH IOPT(LOCACC)=1.)
C      (MOVE BLOCK OF EQUATIONS INTO W(*,*)  STARTING AT FIRST
C       ROW OF W(*,*).  SET IOPT(LOCACC+2)=NO. OF ROWS IN BLOCK.)
C              LOOP
C              CALL DBOLS()
C
C                  IF(IOPT(LOCACC) .EQ. 1) THEN
C                      STACK EQUAS., STARTING AT ROW IOPT(LOCACC+1),
C                       INTO W(*,*).
C                       SET IOPT(LOCACC+2)=NO. OF EQUAS.
C                      IF LAST BLOCK OF EQUAS., SET IOPT(LOCACC)=2.
C                  ELSE IF IOPT(LOCACC) .EQ. 2) THEN
C                      (PROCESS IS OVER. EXIT LOOP.)
C                  ELSE
C                      (ERROR CONDITION. SHOULD NOT HAPPEN.)
C                  END IF
C              END LOOP
C              SET IOPT(LOCACC-1)=-OPTION NUMBER FOR SEQ. ACCUMULATION.
C              CALL DBOLS( )
      IOPT(LOCACC+1)=1
      IGO=1
20085 LDS=4
      GO TO 20080
10002 IF (.NOT.(JP.EQ.2)) GO TO 10003
      IF (.NOT.(IP.GT.0)) GO TO 20088
C
C     GET ACTUAL LENGTHS OF ARRAYS FOR CHECKING AGAINST NEEDS.
      LOCDIM=LP+2
C
C     LMDW.GE.MROWS
C     LNDW.GE.NCOLS+1
C     LLB .GE.NCOLS
C     LLX .GE.NCOLS+EXTRA REQD. IN OPTIONS.
C     LLRW.GE.5*NCOLS
C     LLIW.GE.2*NCOLS
C     LIOP.GE. AMOUNT REQD. FOR IOPTION ARRAY.
      LMDW=IOPT(LOCDIM  )
      LNDW=IOPT(LOCDIM+1)
      LLB= IOPT(LOCDIM+2)
      LLX= IOPT(LOCDIM+3)
      LLRW=IOPT(LOCDIM+4)
      LLIW=IOPT(LOCDIM+5)
      LIOPT=IOPT(LOCDIM+6)
      CHECKL=.TRUE.
20088 LDS=8
      GO TO 20080
C
C     OPTION TO MODIFY THE COLUMN SCALING.
10003 IF (.NOT.(JP.EQ.3)) GO TO 10004
      IF (.NOT.(IP.GT.0)) GO TO 20091
      ISCALE=IOPT(LP+2)
C
C     SEE THAT ISCALE IS 1 THRU 3.
      IF (.NOT.(ISCALE.LT.1 .OR. ISCALE.GT.3)) GO TO 20094
      NERR=7
      NCHAR=40
      CALL XERRWV('DBOLS(). ISCALE OPTION=(I1) MUST BE 1-3.',
     * NCHAR,NERR,LEVEL,
     * 1,ISCALE,IDUM,0,RDUM,RDUM)
      ASSIGN 20097 TO NPR007
      GO TO 30007
20097 CONTINUE
20094 CONTINUE
20091 LDS=2
      GO TO 20080
C
C     IN THIS OPTION THE USER HAS PROVIDED SCALING.  THE
C     SCALE FACTORS FOR THE COLUMNS BEGIN IN X(NCOLS+IOPT(LP+2)).
10004 IF (.NOT.(JP.EQ.4)) GO TO 10005
      IF (.NOT.(IP.GT.0)) GO TO 20098
      ISCALE=4
      IF (.NOT.(IOPT(LP+2).LE.0)) GO TO 20101
      NERR=8
      NCHAR=85
      CALL XERRWV('DBOLS(). OFFSET PAST X(NCOLS) (I1) FOR USER-PROVIDED
     * COLUMN SCALING MUST BE POSITIVE.',
     * NCHAR,NERR,LEVEL,
     * 1,IOPT(LP+2),IDUM,0,RDUM,RDUM)
      ASSIGN 20104 TO NPR007
      GO TO 30007
20104 CONTINUE
20101 CALL DCOPY(NCOLS,X(NCOLS+IOPT(LP+2)),1,RW,1)
      LENX=LENX+NCOLS
      J=1
      N20105=NCOLS
      GO TO 20106
20105 J=J+1
20106 IF ((N20105-J).LT.0) GO TO 20107
      IF (.NOT.(RW(J).LE.ZERO)) GO TO 20109
      NERR=9
      NCHAR=85
      CALL XERRWV('DBOLS(). EACH PROVIDED COL. SCALE FACTOR MUST BE POSI
     *TIVE. COMPONENT (I1) NOW = (R1).',
     * NCHAR,NERR,LEVEL,
     * 1,J,IDUM,1,RW(J),RDUM)
      ASSIGN 20112 TO NPR007
      GO TO 30007
20112 CONTINUE
20109 GO TO 20105
20107 CONTINUE
20098 LDS=2
      GO TO 20080
C
C     IN THIS OPTION AN OPTION ARRAY IS PROVIDED TO DBOLSM().
10005 IF (.NOT.(JP.EQ.5)) GO TO 10006
      IF (.NOT.(IP.GT.0)) GO TO 20113
      LOPT=IOPT(LP+2)
20113 LDS=2
      GO TO 20080
C
C     THIS OPTION USES THE NEXT LOC OF IOPT(*) AS AN
C     INCREMENT TO SKIP.
10006 IF (.NOT.(JP.EQ.6)) GO TO 10007
      IF (.NOT.(IP.GT.0)) GO TO 20116
      LP=IOPT(LP+2)-1
      LDS=0
      GO TO 20117
20116 LDS=2
20117 GO TO 20080
C
C     NO VALID OPTION NUMBER WAS NOTED. THIS IS AN ERROR CONDITION.
10007 NERR=6
      NCHAR=47
      CALL XERRWV('DBOLS(). THE OPTION NUMBER=(I1) IS NOT DEFINED.',
     * NCHAR,NERR,LEVEL,
     * 1,JP,IDUM,0,IDUM,IDUM)
      ASSIGN 20119 TO NPR007
      GO TO 30007
20119 CONTINUE
20083 GO TO 20080
20081 GO TO 20006
C     PROCEDURE(ACCUMULATE LEAST SQUARES EQUATIONS)
30004 MROWS=IOPT(LOCACC+1)-1
      INROWS=IOPT(LOCACC+2)
      MNEW=MROWS+INROWS
      IF (.NOT.(MNEW.LT.0 .OR. MNEW.GT.MDW)) GO TO 20120
      NERR=10
      NCHAR=61
      CALL XERRWV('DBOLS(). NO. OF ROWS=(I1) MUST BE .GE. 0 .AND. .LE. M
     *DW=(I2).',NCHAR,NERR,LEVEL,
     *2,MNEW,MDW,0,RDUM,RDUM)
      ASSIGN 20123 TO NPR007
      GO TO 30007
20123 CONTINUE
20120 CONTINUE
20121 J=1
      N20124=MIN0(NCOLS+1,MNEW)
      GO TO 20125
20124 J=J+1
20125 IF ((N20124-J).LT.0) GO TO 20126
      I=MNEW
      N20128=MAX0(MROWS,J)+1
      GO TO 20129
20128 I=-1+I
20129 IF (-(N20128-I).LT.0) GO TO 20130
      IBIG=ISAMAX(I-J,W(J,J),1)+J-1
C
C     PIVOT FOR INCREASED STABILITY.
      CALL DROTG(W(IBIG,J),W(I,J),SC,SS)
      CALL DROT(NCOLS+1-J,W(IBIG,J+1),MDW,W(I,J+1),MDW,SC,SS)
      W(I,J)=ZERO
      GO TO 20128
20130 GO TO 20124
20126 MROWS=MIN0(NCOLS+1,MNEW)
      IOPT(LOCACC+1)=MROWS+1
      IGO=IOPT(LOCACC)
      GO TO 20015
C     PROCEDURE(INITIALIZE VARIABLES AND DATA VALUES)
30005 J=1
      N20132=NCOLS
      GO TO 20133
20132 J=J+1
20133 IF ((N20132-J).LT.0) GO TO 20134
      NX0140=ISCALE
      IF (NX0140.LT.1.OR.NX0140.GT.4) GO TO 20140
      GO TO (20136,20137,20138,20139), NX0140
C
C     THIS IS THE NOMINAL SCALING. EACH NONZERO
C     COL. HAS MAX. NORM EQUAL TO ONE.
20136 IBIG=ISAMAX(MROWS,W(1,J),1)
      RW(J)= DABS(W(IBIG,J))
      IF (.NOT.(RW(J).EQ.ZERO)) GO TO 20142
      RW(J)=ONE
      GO TO 20143
20142 RW(J)=ONE/RW(J)
20143 GO TO 20141
C
C     THIS CHOICE OF SCALING MAKES EACH NONZERO COLUMN
C     HAVE EUCLIDEAN LENGTH EQUAL TO ONE.
20137 RW(J)=DNRM2(MROWS,W(1,J),1)
      IF (.NOT.(RW(J).EQ.ZERO)) GO TO 20145
      RW(J)=ONE
      GO TO 20146
20145 RW(J)=ONE/RW(J)
20146 GO TO 20141
C
C     THIS CASE EFFECTIVELY SUPPRESSES SCALING BY SETTING
C     THE SCALING MATRIX TO THE IDENTITY MATRIX.
20138 RW(1)=ONE
      CALL DCOPY(NCOLS,RW,0,RW,1)
      GO TO 20135
20139 GO TO 20135
20140 CONTINUE
20141 GO TO 20132
20134 CONTINUE
20135 GO TO 20019
C     PROCEDURE(RETURN TO USER PROGRAM UNIT)
30007 MODE=-NERR
      IGO=0
C
C     THIS TEST IS ONLY FOR AVOIDING A COMPILE ERROR ON
C     THE A-GO-TO AFTER THE RETURN.
      IF(.TRUE.) RETURN
      GO TO NPR007, (20024,20028,20032,20036,20040,20044,20048,20052,200
     *56,20064,20075,20097,20104,20112,20119,20123)
      END

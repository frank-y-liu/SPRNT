C
C   DRIVER FOR TESTING CMLIB ROUTINES
C      DBFQAD  DBINT4  DBINTK  DBSPDR  DBSPEV  DBSPPP
C      DBSPVD  DBSPVN  DBSQAD  DBVALU  DINTRV  DPFQAD
C      DPPQAD  DPPVAL
C
C    ONE INPUT DATA CARD IS REQUIRED
C         READ(LIN,1) KPRINT,TIMES
C    1    FORMAT(I1,E10.0)
C
C     KPRINT = 0   NO PRINTING
C              1   NO PRINTING FOR PASSED TESTS, SHORT MESSAGE
C                  FOR FAILED TESTS
C              2   PRINT SHORT MESSAGE FOR PASSED TESTS, FULLER
C                  INFORMATION FOR FAILED TESTS
C              3   PRINT COMPLETE QUICK-CHECK RESULTS
C
C                ***IMPORTANT NOTE***
C         ALL QUICK CHECKS USE ROUTINES R2MACH AND D2MACH
C         TO SET THE ERROR TOLERANCES.
C     TIMES IS A CONSTANT MULTIPLIER THAT CAN BE USED TO SCALE THE
C     VALUES OF R1MACH AND D1MACH SO THAT
C               R2MACH(I) = R1MACH(I) * TIMES   FOR I=3,4,5
C               D2MACH(I) = D1MACH(I) * TIMES   FOR I=3,4,5
C     THIS MAKES IT EASILY POSSIBLE TO CHANGE THE ERROR TOLERANCES
C     USED IN THE QUICK CHECKS.
C     IF TIMES .LE. 0.0 THEN TIMES IS DEFAULTED TO 1.0
C
C              ***END NOTE***
C
      COMMON/UNIT/LUN
      COMMON/MSG/ICNT,JTEST(38)
      COMMON/XXMULT/TIMES
      LUN=I1MACH(2)
      LIN=I1MACH(1)
      ITEST=1
C
C     READ KPRINT,TIMES PARAMETERS FROM DATA CARD..
C
      READ(LIN,1) KPRINT,TIMES
1     FORMAT(I1,E10.0)
      IF(TIMES.LE.0.) TIMES=1.
      CALL XSETUN(LUN)
      CALL XSETF(1)
      CALL XERMAX(1000)
C   TEST DOUBLE PRECISION B-SPLINE PACKAGE
      CALL DBSPCK(KPRINT,IPASS)
      ITEST=ITEST*IPASS
C
      IF(KPRINT.GE.1.AND.ITEST.NE.1) WRITE(LUN,2)
2     FORMAT(/' ***** WARNING -- AT LEAST ONE TEST FOR SUBLIBRARY,
     1 DBSPLIN HAS FAILED ***** ')
      IF(KPRINT.GE.1.AND.ITEST.EQ.1) WRITE(LUN,3)
3     FORMAT(/' ----- SUBLIBRARY DBSPLIN PASSED ALL TESTS ----- ')
      END
      DOUBLE PRECISION FUNCTION D2MACH(I)
      DOUBLE PRECISION D1MACH
      COMMON/XXMULT/TIMES
      D2MACH=D1MACH(I)
      IF(I.EQ.1.OR. I.EQ.2) RETURN
      D2MACH = D2MACH * DBLE(TIMES)
      RETURN
      END
      SUBROUTINE DBSPCK(KPRINT,IPASS)
C
C
C     DBSPCK IS A QUICK CHECK ROUTINE FOR THE B-SPLINE PACKAGE WHICH
C     TESTS CONSISTENCY BETWEEN RESULTS FROM HIGHER LEVEL ROUTINES.
C     THOSE ROUTINES NOT EXPLICITLY CALLED ARE EXERCISED AT SOME LOWER
C     LEVEL.  THE ROUTINES EXERCISED ARE DBSPVD,DBSPDR,DBSPVN,DBSPEV,
C     DINTRV,DBVALU,DBSPPP,DPPVAL,DBINT4,DBINTK,DBNFAC,DBNSLV,DBSQAD,
C     DPPQAD,DBFQAD,DPFQAD,DBSGQ8,DPPGQ8
C
C
      COMMON /UNIT/ LUN
      COMMON/MSG/ICNT,ITEST
      INTEGER I, IBCL, IBCR, ID, IERR, IFLG, IKNT, ILEFT, ILO, INBV,
     * INEV, INPPV, IWORK, J, JHIGH, K, KK, KNT, KNTOPT, LDC, LDCC,
     * LUN, LXI, MFLAG, N, NDATA, NMK, NN,ITEST(38)
      DOUBLE PRECISION ADIF, ATOL, BC, BQUAD, BV, C, DEN, DN, ER, FBCL,
     * FBCR, PQUAD, PV, PI, Q, QQ, QSAVE, QUAD, SPV, SV, T, TOL, W, X,
     * XI, XL, XX, X1, X2, Y, QTOL, CC
      DOUBLE PRECISION DBVALU, DPPVAL, D2MACH, DFB
      DIMENSION X(11), Y(11), QQ(77), BC(13), T(17), Q(3), QSAVE(2),
     * XI(11), C(4,10), SV(4), ADIF(52), W(65), CC(4,4)
      EXTERNAL DFB
      IF(KPRINT.GE.2) WRITE (LUN,99999)
99999 FORMAT('1',1X,' QUICK CHECK FOR DOUBLE PRECISION SPLINE ROUTINES')
      DO 5 I=1,7
5     ITEST(I)=0
      ICNT=1
      PI = 4.0D0*ATAN(1.0D0)
      TOL = 6000.0D0*D2MACH(4)
      QTOL = D2MACH(4)
      QTOL = 2000.0D0*DMAX1(QTOL,1.0D-18)
      IFLG = 0
C     GENERATE DATA
      NDATA = 11
      DEN = DBLE(FLOAT(NDATA-1))
      DO 10 I=1,NDATA
        X(I) = DBLE(FLOAT(I-1))/DEN
        Y(I) = DSIN(PI*X(I))
   10 CONTINUE
      X(3) = DBLE(FLOAT(2))/DEN + 0.1D0/DEN
      Y(3) = DSIN(PI*X(3))
C     COMPUTE SPLINES FOR TWO KNOT ARRAYS
      DO 80 IKNT=1,2
        KNT = 3 - IKNT
        IBCL = 1
        IBCR = 2
        FBCL = PI
        FBCR = 0.0D0
        CALL DBINT4(X, Y, NDATA, IBCL, IBCR, FBCL, FBCR, KNT, T, BC, N,
     *   K, W)
C     ERROR TEST ON DBINT4
        INBV = 1
        DO 20 I=1,NDATA
          XX = X(I)
          BV = DBVALU(T,BC,N,K,0,XX,INBV,W)
          ER = DABS(Y(I)-BV)
          IF (ER.LE.TOL) GO TO 20
      IFLG = 1
      IF(KPRINT.GE.2) WRITE (LUN,99991)
99991 FORMAT (1X,'ERROR TEST FOR INTERPOLATION BY DBINT4 NOT SATISFIED')
      GO TO 30
   20   CONTINUE
      ITEST(ICNT)=1
      ICNT=2
   30   CONTINUE
        INBV = 1
        BV = DBVALU(T,BC,N,K,1,X(1),INBV,W)
        ER = DABS(PI-BV)
        IF (ER.LE.TOL) GO TO 35
      IFLG = 1
      IF(KPRINT.GE.2) WRITE (LUN,99989)
99989 FORMAT (1X, 'ERROR TEST FOR INTERPOLATION BY DBINT4 NOT SATISFIED,
     * BY FIRST DERIVATIVE')
      GO TO 40
   35 ITEST(ICNT)=1
      ICNT=3
   40   CONTINUE
        BV = DBVALU(T,BC,N,K,2,X(NDATA),INBV,W)
        ER = DABS(BV)
        IF (ER.LE.TOL) GO TO 45
      IFLG = 1
      IF(KPRINT.GE.2) WRITE (LUN,99988)
99988 FORMAT (1X, 'ERROR TEST FOR INTERPOLATION BY DBINT4 NOT SATISFIED,
     * BY SECOND DERIVATIVE')
      GO TO 50
   45 ITEST(ICNT)=1
      ICNT=4
   50   CONTINUE
C     TEST FOR EQUALITY OF AREA FROM 4 ROUTINES
        X1 = X(1)
        X2 = X(NDATA)
        CALL DBSQAD(T, BC, N, K, X1, X2, BQUAD, W)
        LDC = 4
        CALL DBSPPP(T, BC, N, K, LDC, C, XI, LXI, W)
        CALL DPPQAD(LDC, C, XI, LXI, K, X1, X2, Q(1))
        CALL DBFQAD(DFB, T, BC, N, K, 0, X1, X2, QTOL, Q(2), IERR, W)
        CALL DPFQAD(DFB, LDC, C, XI, LXI, K, 0, X1, X2, QTOL, Q(3),
     *   IERR)
C     ERROR TEST FOR QUADRATURES
        DO 60 I=1,3
          ER = DABS(BQUAD-Q(I))
          IF (ER.LE.QTOL) GO TO 60
      IFLG = 1
      IF(KPRINT.GE.2) WRITE (LUN,99996)
99996 FORMAT (1X, 'ERROR IN QUADRATURE CHECKS')
      GO TO 70
   60   CONTINUE
      ITEST(ICNT)=1
      ICNT=5
   70   CONTINUE
        QSAVE(KNT) = BQUAD
   80 CONTINUE
      ER = DABS(QSAVE(1)-QSAVE(2))
      IF (ER.GT.TOL) GO TO 330
      ITEST(ICNT)=1
      ICNT=6
   90 CONTINUE
C     CHECK DBSPDR AND DBSPEV AGAINST DBVALU, DPPVAL AND DBSPVD
      CALL DBSPDR(T, BC, N, K, K, ADIF)
      INEV = 1
      INBV = 1
      INPPV = 1
      ILO = 1
      DO 140 I=1,6
        XX = X(I+I-1)
        CALL DBSPEV(T, ADIF, N, K, K, XX, INEV, SV, W)
        ATOL = TOL
        DO 100 J=1,K
          SPV = DBVALU(T,BC,N,K,J-1,XX,INBV,W)
          ER = DABS(SPV-SV(J))
          X2 = DABS(SV(J))
          IF (X2.GT.1.0D0) ER = ER/X2
          IF (ER.GT.ATOL) GO TO 340
          ATOL = ATOL*10.0D0
  100   CONTINUE
        ATOL = TOL
        DO 110 J=1,K
          SPV = DPPVAL(LDC,C,XI,LXI,K,J-1,XX,INPPV)
          ER = DABS(SPV-SV(J))
          X2 = DABS(SV(J))
          IF (X2.GT.1.0D0) ER = ER/X2
          IF (ER.GT.ATOL) GO TO 350
          ATOL = ATOL*10.D0
  110   CONTINUE
        ATOL = TOL
        LDCC = 4
        X1 = XX
        IF (I+I-1.EQ.NDATA) X1 = T(N)
        NN = N + K
        CALL DINTRV(T, NN, X1, ILO, ILEFT, MFLAG)
        DO 130 J=1,K
          CALL DBSPVD(T, K, J, XX, ILEFT, LDCC, CC, W)
          ER = 0.0D0
          DO 120 JJ=1,K
            ER = ER + BC(ILEFT-K+JJ)*CC(JJ,J)
  120     CONTINUE
          ER = DABS(ER-SV(J))
          X2 = DABS(SV(J))
          IF (X2.GT.1.0D0) ER = ER/X2
          IF (ER.GT.ATOL) GO TO 360
          ATOL = ATOL*10.0D0
  130   CONTINUE
  140 CONTINUE
      ITEST(ICNT)=1
      ICNT=7
  150 CONTINUE
      DO 190 K=2,4
        N = NDATA
        NMK = N - K
        DO 160 I=1,K
          T(I) = X(1)
          T(N+I) = X(N)
  160   CONTINUE
        XL = X(N) - X(1)
        DN = DBLE(FLOAT(N-K+1))
        DO 170 I=1,NMK
          T(K+I) = X(1) + DBLE(FLOAT(I))*XL/DN
  170   CONTINUE
        CALL DBINTK(X, Y, T, N, K, BC, QQ, W)
C     ERROR TEST ON DBINTK
        INBV = 1
        DO 180 I=1,N
          XX = X(I)
          BV = DBVALU(T,BC,N,K,0,XX,INBV,W)
          ER = DABS(Y(I)-BV)
          IF (ER.GT.TOL) GO TO 380
  180   CONTINUE
  190 CONTINUE
      ITEST(ICNT)=1
  200 CONTINUE
      ITOP=7
      IPASS=1
      DO 2000 I=1,ITOP
2000  IPASS=IPASS*ITEST(I)
      IF(KPRINT.LE.1) GO TO 3100
C
C     TRIGGER ERROR CONDITIONS
C
      IF(KPRINT.EQ.3) WRITE (LUN,99997)
99997 FORMAT (/, 1X,'TRIGGER 52 ERROR CONDITIONS'/)
C
C
      W(1) = 11.0D0
      W(2) = 4.0D0
      W(3) = 2.0D0
      W(4) = 0.5D0
      W(5) = 4.0D0
      ILO = 1
      INEV = 1
      INBV = 1
      CALL DINTRV(T, N+1, W(4), ILO, ILEFT, MFLAG)
      DO 280 I=1,5
        W(I) = -W(I)
        N = INT(SNGL(W(1)))
        K = INT(SNGL(W(2)))
        ID = INT(SNGL(W(3)))
        XX = W(4)
        LDC = INT(SNGL(W(5)))
        IF (I.EQ.5) GO TO 210
        BV = DBVALU(T,BC,N,K,ID,XX,INBV,QQ)
        CALL DBSPEV(T, ADIF, N, K, ID, XX, INEV, SV, QQ)
        JHIGH = N - 10
        CALL DBSPVN(T, JHIGH, K, ID, XX, ILEFT, SV, QQ, IWORK)
        CALL DBFQAD(DFB, T, BC, N, K, ID, XX, X2, TOL, QUAD, IERR, QQ)
  210   CONTINUE
        IF (I.EQ.3 .OR. I.EQ.4) GO TO 220
        CALL DBSPPP(T, BC, N, K, LDC, C, XI, LXI, QQ)
  220   CONTINUE
        IF (I.EQ.4 .OR. I.EQ.5) GO TO 230
        CALL DBSPDR(T, BC, N, K, ID, ADIF)
  230   CONTINUE
        IF (I.EQ.3 .OR. I.EQ.5) GO TO 240
        CALL DBSQAD(T, BC, N, K, XX, X2, BQUAD, QQ)
  240   CONTINUE
        IF (I.EQ.1) GO TO 250
        CALL DBSPVD(T, K, ID, XX, ILEFT, LDC, C, QQ)
  250   CONTINUE
        IF (I.GT.2) GO TO 260
        CALL DBINTK(X, Y, T, N, K, BC, QQ, ADIF)
  260   CONTINUE
        IF (I.EQ.4) GO TO 270
        KNTOPT = LDC - 2
        IBCL = K - 2
        CALL DBINT4(X, Y, N, IBCL, ID, FBCL, FBCR, KNTOPT, T, BC, NN,
     *   KK, QQ)
  270   CONTINUE
        W(I) = -W(I)
  280 CONTINUE
      KNTOPT = 1
      X(1) = 1.0D0
      CALL DBINT4(X, Y, N, IBCL, IBCR, FBCL, FBCR, KNTOPT, T, BC, N, K,
     * QQ)
      CALL DBINTK(X, Y, T, N, K, BC, QQ, ADIF)
      X(1) = 0.0D0
      ATOL = 1.0D0
      KNTOPT = 3
      DO 290 I=1,3
        QQ(I) = -.30D0 + 0.10D0*DBLE(FLOAT(I-1))
        QQ(3+I) = 1.1D0 + 0.10D0*DBLE(FLOAT(I-1))
  290 CONTINUE
      QQ(1) = 1.0D0
      CALL DBINT4(X, Y, NDATA, 1, 1, FBCL, FBCR, 3, T, BC, N, K, QQ)
      CALL DBFQAD(DFB, T, BC, N, K, ID, X1, X2, ATOL, QUAD, IERR, QQ)
      INPPV = 1
      DO 310 I=1,5
        W(I) = -W(I)
        LXI = INT(SNGL(W(1)))
        K = INT(SNGL(W(2)))
        ID = INT(SNGL(W(3)))
        XX = W(4)
        LDC = INT(SNGL(W(5)))
        PV = DPPVAL(LDC,C,XI,LXI,K,ID,XX,INPPV)
        CALL DPFQAD(DFB, LDC, C, XI, LXI, K, ID, XX, X2, TOL, QUAD,
     *   IERR)
        IF (I.EQ.3) GO TO 300
        CALL DPPQAD(LDC, C, XI, LXI, K, XX, X2, PQUAD)
  300   CONTINUE
        W(I) = -W(I)
  310 CONTINUE
      LDC = INT(SNGL(W(5)))
      CALL DPFQAD(DFB, LDC, C, XI, LXI, K, ID, X1, X2, ATOL, QUAD, IERR)
3100   CONTINUE
      IF(IPASS.EQ.1.AND.KPRINT.GT.1) WRITE(LUN,99980)
      IF(IPASS.EQ.0.AND.KPRINT.NE.0) WRITE(LUN,99981)
99980 FORMAT(/' *** DOUBLE PRECISION B-SPLINE PACKAGE PASSED ALL TESTS
     *  *** ')
99981 FORMAT(/' *** DOUBLE PRECISION B-SPLINE PACKAGE FAILED,
     *   SOME TESTS *** ')
      RETURN
C
C
  320 CONTINUE
  330 CONTINUE
      IFLG = 1
      IF(KPRINT.GE.2) WRITE (LUN,99995)
99995 FORMAT (1X, 'ERROR IN QUADRATURE CHECK USING TWO SETS OF KNOTS')
      GO TO 90
  340 CONTINUE
      IFLG = 1
      IF(KPRINT.GE.2) WRITE (LUN,99994)
99994 FORMAT (1X,'COMPARISONS FROM DBSPEV AND DBVALU DO NOT AGREE')
      GO TO 150
  350 CONTINUE
      IFLG = 1
      IF(KPRINT.GE.2) WRITE (LUN,99993)
99993 FORMAT (1X,'COMPARISONS FROM DBSPEV AND DPPVAL DO NOT AGREE')
      GO TO 150
  360 CONTINUE
      IFLG = 1
      IF(KPRINT.GE.2) WRITE (LUN,99992)
99992 FORMAT (1X,'COMPARISONS FROM DBSPEV AND DBSPVD DO NOT AGREE')
      GO TO 150
  380 CONTINUE
      IFLG = 1
      IF(KPRINT.GE.2) WRITE (LUN,99990)
99990 FORMAT (1X,'ERROR TEST FOR INTERPOLATION BY DBINTK NOT SATISFIED')
      GO TO 200
  400 CONTINUE
      END
      REAL FUNCTION R2MACH(I)
      COMMON/XXMULT/TIMES
      R2MACH=R1MACH(I)
      IF(I.EQ.1.OR. I.EQ.2) RETURN
      R2MACH = R2MACH * TIMES
      RETURN
      END
      DOUBLE PRECISION FUNCTION DFB(X)
      DOUBLE PRECISION X
      DFB = 1.0D0
      RETURN
      END

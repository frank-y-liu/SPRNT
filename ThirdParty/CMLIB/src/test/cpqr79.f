C
C   DRIVER FOR TESTING CMLIB ROUTINES
C     RPQR79
C     CPQR79
C
C    ONE INPUT DATA CARD IS REQUIRED
C         READ(LIN,1) KPRINT,TIMES
C    1    FORMAT(I1,E10.0)
C
C     KPRINT = 0   NO PRINTING
C              1   NO PRINTING FOR PASSED TESTS, SHORT MESSAGE
C                  FOR FAILED TESTS
C              2   PRINT SHORT MESSAGE FOR PASSED TESTS, FULLER
C                  INFORMATION FOR FAILED TESTS
C              3   PRINT COMPLETE QUICK-CHECK RESULTS
C
C                ***IMPORTANT NOTE***
C         ALL QUICK CHECKS USE ROUTINES R2MACH AND D2MACH
C         TO SET THE ERROR TOLERANCES.
C     TIMES IS A CONSTANT MULTIPLIER THAT CAN BE USED TO SCALE THE
C     VALUES OF R1MACH AND D1MACH SO THAT
C               R2MACH(I) = R1MACH(I) * TIMES   FOR I=3,4,5
C               D2MACH(I) = D1MACH(I) * TIMES   FOR I=3,4,5
C     THIS MAKES IT EASILY POSSIBLE TO CHANGE THE ERROR TOLERANCES
C     USED IN THE QUICK CHECKS.
C     IF TIMES .LE. 0.0 THEN TIMES IS DEFAULTED TO 1.0
C
C              ***END NOTE***
C
      COMMON/UNIT/LUN
      COMMON/MSG/ICNT,JTEST(38)
      COMMON/XXMULT/TIMES
      LUN=I1MACH(2)
      LIN=I1MACH(1)
      ITEST=1
C
C     READ KPRINT,TIMES PARAMETERS FROM DATA CARD..
C
      READ(LIN,1) KPRINT,TIMES
1     FORMAT(I1,E10.0)
      IF(TIMES.LE.0.) TIMES=1.
      CALL XSETUN(LUN)
      CALL XSETF(1)
      CALL XERMAX(1000)
C   TEST RPQR79
      CALL RQRTST(KPRINT,IPASS)
      ITEST=ITEST*IPASS
C   TEST CPQR79
      CALL CQRTST(KPRINT,IPASS)
      ITEST=ITEST*IPASS
C
      IF(KPRINT.GE.1.AND.ITEST.NE.1) WRITE(LUN,2)
2     FORMAT(/' ***** WARNING -- AT LEAST ONE TEST FOR SUBLIBRARY,
     1 CPQR79 HAS FAILED ***** ')
      IF(KPRINT.GE.1.AND.ITEST.EQ.1) WRITE(LUN,3)
3     FORMAT(/' ----- SUBLIBRARY CPQR79 PASSED ALL TESTS -----')
      END
      SUBROUTINE CQRTST(KPRINT, IPASS)
      COMMON /UNIT/ LUN
      COMMON /MSG/ ICNT, ITEST
      INTEGER ITEST(38), ITMP(15)
      REAL CHKR(8), CHKI(8)
      COMPLEX COEFF(21),ROOT(20)
      DIMENSION WORK(840)
      DIMENSION CR(21), CI(21), WR(20), WI(20), ABR(20), REL(20),
     * KLUS(20)
      DATA CR(1), CR(2), CR(3), CR(4), CR(5), CR(6), CR(7), CR(8),
     * CR(9) /1.0,-7.0,8.0,28.0,-49.0,7.0,-8.0,-28.0,48.0/
      DATA CI(1), CI(2), CI(3), CI(4), CI(5), CI(6), CI(7), CI(8),
     * CI(9) /0.0,-2.0,6.0,8.0,-24.0,2.0,-6.0,-8.0,24.0/
      DATA CHKR(1), CHKR(2), CHKR(3), CHKR(4), CHKR(5), CHKR(6),
     * CHKR(7), CHKR(8) /.39999999999993E+01,.29999999999989E+01,
     * -.19999999999992E+01,.19999999999995E+01,0.0,
     * -.99999999999967E+00,0.0,.99999999999999E+00/
      DATA CHKI(1), CHKI(2), CHKI(3), CHKI(4), CHKI(5), CHKI(6),
     * CHKI(7), CHKI(8) /.19999999999996E+01,0.0,
     * 0.0,0.0,-.99999999999984E+00,
     * 0.0,.99999999999995E+00,0.0/
C-----INITIALIZE VARIABLES FOR TESTING.
      DO 5 I = 1, 15
        ITEST(I) = 0
        ITMP(I) = 0
    5 CONTINUE
      TOL = SQRT(R2MACH(3))
      ICNT = 1
      IPASS = 0
      NDEG = 8
      DO 6 I=1,9
6     COEFF(I)=CMPLX(CR(I),CI(I))
      CALL CPQR79(NDEG,COEFF,ROOT,IERR,WORK)
C-----CHECK TO SEE IF TEST WAS PASSED.
C-----CHECK WR AND WI ARRAY VALUES.
      IF (KPRINT.GE.2) WRITE (LUN,99999)
99999 FORMAT ('1')
      DO 10 I = 1, 7
        WR(I)=REAL(ROOT(I))
        WI(I)=AIMAG(ROOT(I))
         DO 8 K=1,7
        IF (ABS(WR(I)-CHKR(K)).LE.TOL .AND. ABS(WI(I)-CHKI(K)).LE.TOL)
     1  GO TO 9
    8   CONTINUE
        GO TO 10
    9  ITMP(K)=1
   10 CONTINUE
      IPSS = 1
      DO 20 I = 1, 7
        IPSS = ITMP(I)*IPSS
   20 CONTINUE
      ITEST(ICNT) = IPSS
C-----CHECK FOR SUPPRESSION OF PRINTING.
      IF (KPRINT.EQ.0) GO TO 40
      IF (KPRINT.EQ.1 .AND. ITEST(ICNT).EQ.1) GO TO 40
      IF (KPRINT.EQ.1) GO TO 30
      WRITE (LUN,99998)
99998 FORMAT (/'CPQR QUICK CHECK')
      IF (KPRINT.NE.3 .AND. ITEST(ICNT).NE.0) GO TO 30
      WRITE (LUN,99997)
99997 FORMAT (/'CHECK REAL AND IMAGINARY PARTS OF ZERO')
      WRITE (LUN,99996)
99996 FORMAT ('COEFFICIENTS')
      WRITE (LUN,99995) (CR(J),J = 1, 9), (CI(J),J = 1, 9)
99995 FORMAT (/(9E14.5))
      WRITE (LUN,99994)
99994 FORMAT (//43X, 'TABLE OF ZEROS'//2X,' ZERO ', 8X, 'REAL  PART',
     * 12X,'IMAG  PART', 12X/2X,'NUMBER', 8X, 2(' OF  ZERO ',
     * 12X))
      WRITE (LUN,99993) (J,WR(J),WI(J),J = 1, 7)
99993 FORMAT (I6, 3X, 2E22.14)
   30 CALL PASS
   40 CONTINUE
C-----INCREMENT COUNTER FOR TESTS.
      ICNT = ICNT + 1
C-----CLEAR TEMPORARIES FOR NEXT TEST.
      ITMP(1) = 0
      ITMP(2) = 0
C-----SET UP NEXT PROBLEM.
      COEFF(1)=(1.0,1.0)
      COEFF(2)=(1.0,3.0)
      NDEG = 1
      CALL CPQR79(NDEG,COEFF,ROOT,IERR,WORK)
C-----CHECK TO SEE IF TEST WAS PASSED.
C-----CHECK ONLY FIRST VALUES OF ARRAYS
      WR(1)=REAL(ROOT(1))
      WI(1)=AIMAG(ROOT(1))
      IF (ABS(REAL(ROOT(1))-(-.2000E+01)).LE.TOL) ITMP(1) = 1
      IF (ABS(AIMAG(ROOT(1))-(-.1E+01)).LE.TOL) ITMP(2) = 1
      ITEST(ICNT) = ITMP(1)*ITMP(2)
C-----CHECK FOR SUPPRESSION OF PRINTING.
      IF (KPRINT.EQ.0) GO TO 60
      IF (KPRINT.EQ.1 .AND. ITEST(ICNT).EQ.1) GO TO 60
      IF (KPRINT.EQ.1) GO TO 50
      IF (KPRINT.NE.3 .AND. ITEST(ICNT).NE.0) GO TO 50
      WRITE (LUN,99992)
99992 FORMAT (/'TEST SUBSEQUENT RELATED CALL')
      WRITE (LUN,99994)
      WRITE (LUN,99993) J, WR(1), WI(1)
   50 CALL PASS
      IF (KPRINT.EQ.1) GO TO 60
      WRITE (LUN,99991)
99991 FORMAT (/'(2) ERROR MESSAGES EXPECTED')
      NDEG = 0
      CALL CPQR79(NDEG,COEFF,ROOT,IERR,WORK)
      COEFF(1)=(0.0,0.0)
      NDEG = 2
      CALL CPQR79(NDEG,COEFF,ROOT,IERR,WORK)
   60 CONTINUE
C-----SEE IF ALL TESTS WERE PASSED
      IPSS = 1
      DO 70 I = 1, ICNT
        IPSS = ITEST(I)*IPSS
   70 CONTINUE
      IPASS = IPSS
      IF (IPASS.EQ.1 .AND. KPRINT.GT.1) WRITE (LUN,99990)
      IF (IPASS.EQ.0 .AND. KPRINT.NE.0) WRITE (LUN,99989)
99990 FORMAT (/' ***** CPQR79 PASSED ALL TESTS ***** ')
99989 FORMAT (/' ***** CPQR79 FAILED SOME TESTS ***** ')
      RETURN
      END
      SUBROUTINE RQRTST(KPRINT, IPASS)
      COMMON /UNIT/ LUN
      COMMON /MSG/ ICNT, ITEST
      INTEGER ITEST(38), ITMP(15)
      REAL CHKR(7), CHKI(7)
      COMPLEX ROOT(20)
      DIMENSION WORK(840)
      DIMENSION COEF(21), WR(20), WI(20), ABR(20), REL(20), KLUS(20)
      DATA CHKR(1), CHKR(2), CHKR(3), CHKR(4), CHKR(5), CHKR(6),
     * CHKR(7) /.14142135623714E+01,.14142135623714E+01,
     * 0.0,0.0,-.19999999999970E+01,
     * -.14142135623718E+01,-.14142135623718E+01/
      DATA CHKI(1), CHKI(2), CHKI(3), CHKI(4), CHKI(5), CHKI(6),
     * CHKI(7) /.14142135623723E+01,-.14142135623723E+01,.2E+01,-.2E+01,
     * 0.,.14142135623740E+01,-.14142135623740E+01/
      IF (KPRINT.GE.2) WRITE (LUN,99999)
99999 FORMAT ('1')
C-----INITIALIZE VARIABLES FOR TESTING.
      DO 5 I = 1, 15
        ITEST(I) = 0
        ITMP(I) = 0
    5 CONTINUE
      TOL = SQRT(R2MACH(3))
      ICNT = 1
      IPASS = 0
      BETA = 0.0078125
      DO 10 J = 1, 8
        COEF(J) = BETA
        BETA = BETA + BETA
   10 CONTINUE
      CALL RPQR79(7,COEF,ROOT,IERR,WORK)
C-----CHECK TO SEE IF TEST WAS PASSED.
C-----CHECK WR AND WI ARRAY VALUES.
      DO 20 I = 1, 7
       WR(I)=REAL(ROOT(I))
       WI(I)=AIMAG(ROOT(I))
         DO 18 K=1,7
        IF (ABS(WR(I)-CHKR(K)).LE.TOL .AND. ABS(WI(I)-CHKI(K)).LE.TOL)
     1  GO TO 19
   18    CONTINUE
         GO TO 20
   19  ITMP(K)=1
   20 CONTINUE
      IPSS = 1
      DO 30 I = 1, 7
        IPSS = ITMP(I)*IPSS
   30 CONTINUE
      IPASS=IPSS
      ITEST(ICNT) = IPASS
C-----CHECK FOR SUPPRESSION OF PRINTING.
      IF (KPRINT.EQ.0) GO TO 50
      IF (KPRINT.EQ.1 .AND. ITEST(ICNT).EQ.1) GO TO 50
      IF (KPRINT.EQ.1) GO TO 40
      WRITE (LUN,99998)
99998 FORMAT (/'RPQR QUICK CHECK')
      IF (KPRINT.NE.3 .AND. ITEST(ICNT).NE.0) GO TO 40
      WRITE (LUN,99997)
99997 FORMAT (/'TWICE THE EIGHTH ROOTS OF UNITY EXCLUDING 1.0')
      WRITE (LUN,99996) (COEF(J),J = 1, 8)
99996 FORMAT ('COEFFICIENTS'/, 8E14.5)
      WRITE (LUN,99995)
99995 FORMAT (//43X, 'TABLE OF ZEROS'//2X, ' ZERO ', 8X,'REAL  PART',
     * 12X, 'IMAG  PART', 12X/2X, 'NUMBER', 8X, 2(' OF  ZERO ',
     * 12X))
      WRITE (LUN,99994) (J,WR(J),WI(J),J = 1, 7)
99994 FORMAT (I6, 3X, 2E22.14)
   40 CALL PASS
      IF (KPRINT.LE.1) GO TO 50
      WRITE (LUN,99993)
99993 FORMAT (/'(2) ERROR MESSAGES EXPECTED')
      CALL RPQR79(-21,COEF,ROOT,IERR,WORK)
      COEF(1) = 0.0
      CALL RPQR79(7,COEF,ROOT,IERR,WORK)
   50 CONTINUE
      IF (IPASS.EQ.1 .AND. KPRINT.GT.1) WRITE (LUN,99992)
      IF (IPASS.EQ.0 .AND. KPRINT.NE.0) WRITE (LUN,99991)
99992 FORMAT (/' ***** RPQR79 PASSED ALL TESTS ***** ')
99991 FORMAT (/' ***** RPQR79 FAILED SOME TESTS ***** ')
      RETURN
      END
      DOUBLE PRECISION FUNCTION D2MACH(I)
      DOUBLE PRECISION D1MACH
      COMMON/XXMULT/TIMES
      D2MACH=D1MACH(I)
      IF(I.EQ.1.OR. I.EQ.2) RETURN
      D2MACH = D2MACH * DBLE(TIMES)
      RETURN
      END
      REAL FUNCTION R2MACH(I)
      COMMON/XXMULT/TIMES
      R2MACH=R1MACH(I)
      IF(I.EQ.1.OR. I.EQ.2) RETURN
      R2MACH = R2MACH * TIMES
      RETURN
      END
      SUBROUTINE PASS
      COMMON /UNIT/ LUN
      COMMON /MSG/ ICNT,ITEST
      DIMENSION ITEST(38)
      IF(ITEST(ICNT).EQ.0) GO TO 10
      WRITE(LUN,100) ICNT
  100 FORMAT(/'TEST NUMBER ',I5,'  PASSED')
      RETURN
   10 WRITE(LUN,200) ICNT
  200 FORMAT(/'*****TEST NUMBER ',I5,'  FAILED**** ')
      RETURN
      END
      SUBROUTINE CDIV(AR,AI,BR,BI,CR,CI)
C***BEGIN PROLOGUE  CDIV
C***REFER TO  EISDOC
C
C     Complex division, (CR,CI) = (AR,AI)/(BR,BI)
C***ROUTINES CALLED  (NONE)
C***END PROLOGUE  CDIV
      REAL AR,AI,BR,BI,CR,CI
C
      REAL S,ARS,AIS,BRS,BIS
C***FIRST EXECUTABLE STATEMENT  CDIV
      S = ABS(BR) + ABS(BI)
      ARS = AR/S
      AIS = AI/S
      BRS = BR/S
      BIS = BI/S
      S = BRS**2 + BIS**2
      CR = (ARS*BRS + AIS*BIS)/S
      CI = (AIS*BRS - ARS*BIS)/S
      RETURN
      END
      SUBROUTINE CSROOT(XR,XI,YR,YI)
C***BEGIN PROLOGUE  CSROOT
C***REFER TO  EISDOC
C
C     (YR,YI) = complex sqrt(XR,XI)
C***ROUTINES CALLED  PYTHAG
C***END PROLOGUE  CSROOT
      REAL XR,XI,YR,YI,S,TR,TI,PYTHAG
C
C     BRANCH CHOSEN SO THAT YR .GE. 0.0 AND SIGN(YI) .EQ. SIGN(XI)
C***FIRST EXECUTABLE STATEMENT  CSROOT
      TR = XR
      TI = XI
      S = SQRT(0.5E0*(PYTHAG(TR,TI) + ABS(TR)))
      IF (TR .GE. 0.0E0) YR = S
      IF (TI .LT. 0.0E0) S = -S
      IF (TR .LE. 0.0E0) YI = S
      IF (TR .LT. 0.0E0) YR = 0.5E0*(TI/YI)
      IF (TR .GT. 0.0E0) YI = 0.5E0*(TI/YR)
      RETURN
      END
      REAL FUNCTION PYTHAG(A,B)
C***BEGIN PROLOGUE  PYTHAG
C***REFER TO  EISDOC
C
C     Finds sqrt(A**2+B**2) without overflow or destructive underflow
C***ROUTINES CALLED  (NONE)
C***END PROLOGUE  PYTHAG
      REAL A,B
C
      REAL P,Q,R,S,T
C***FIRST EXECUTABLE STATEMENT  PYTHAG
      P = AMAX1(ABS(A),ABS(B))
      Q = AMIN1(ABS(A),ABS(B))
      IF (Q .EQ. 0.0E0) GO TO 20
   10 CONTINUE
         R = (Q/P)**2
         T = 4.0E0 + R
         IF (T .EQ. 4.0E0) GO TO 20
         S = R/T
         P = P + 2.0E0*P*S
         Q = Q*S
      GO TO 10
   20 PYTHAG = P
      RETURN
      END
